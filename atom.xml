<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Crazy</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-01T06:30:46.674Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Mr.bin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NodeJS-原生篇2</title>
    <link href="http://yoursite.com/2019/03/30/NodeJS-%E5%8E%9F%E7%94%9F%E7%AF%872/"/>
    <id>http://yoursite.com/2019/03/30/NodeJS-原生篇2/</id>
    <published>2019-03-30T04:00:00.000Z</published>
    <updated>2019-04-01T06:30:46.674Z</updated>
    
    <content type="html"><![CDATA[<ol style="background: #bdc3c7;    border-radius: 5px;    color: #2980b9;    font-size: 20px;    font-weight: bold;    cursor: pointer;    padding-top: 10px;    padding-bottom: 10px;    text-decoration:none;    line-height:1;    width:100%;    margin:0;    list-style:none"><br>  <li style="list-decoration:none"><a href="#2-1" style="color: #4682BE;text-decoration:none;margin-left:10px">1. fs模块</a></li><br>  <li><a href="#2-2" style="color: #4682BE;text-decoration:none;margin-left:10px">2. querystring模块</a></li><br>  <li><a href="#2-3" style="color: #4682BE;text-decoration:none;margin-left:10px">3. url模块</a></li><br>  <li><a href="#2-4" style="color: #4682BE;text-decoration:none;margin-left:10px">4. multiparty</a></li><br>  <li><a href="#2-5" style="color: #4682BE;text-decoration:none;margin-left:10px">5. 接口应用</a></li><br></ol><h2 id="2-1">fs模块</h2><p>fs模块可以实现文件的操作，在这里，我们主要了解一下fs的两个方法<br><br><br>1.fs.writeFile(path,data,callback(err))，该方法实现文件内容的写入，其回调函数有个err错误对象参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fs.writeFile('</span>./a.txt, <span class="string">'crazy492 is 1bin'</span>, err =&gt; &#123;</span><br><span class="line"> <span class="keyword">if</span>(err)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'失败'</span>,err);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'成功'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>2.fs.readFile(path,callback(err,buffer))，该方法是读取文件，其回调函数不仅有个err错误对象参数，还有个buffer数据(二进制数据)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs);</span></span><br><span class="line"><span class="string">fs.readFile('</span>./a.txt, (err, buffer) =&gt; &#123;</span><br><span class="line">  <span class="keyword">if</span>(err)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'失败'</span>,err);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'成功'</span>,data);</span><br><span class="line">    <span class="comment">//data打印出来是一堆buffer数据</span></span><br><span class="line">    <span class="comment">//若该文件只是一些简单的字符串，可以data.toString()</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>fs和http搭配的一种应用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http=<span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> fs=<span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> server=http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//req.url 是请求的地址</span></span><br><span class="line">  fs.readFile(req.url, (err, buffer)=&gt;&#123;</span><br><span class="line">    <span class="keyword">if</span>(err)&#123;</span><br><span class="line">      <span class="comment">//发送状态码给浏览器</span></span><br><span class="line">      res.writeHeader(<span class="number">404</span>);</span><br><span class="line">      res.write(<span class="string">'Not Found'</span>);</span><br><span class="line">      res.end();</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      res.writeHeader(<span class="number">200</span>);</span><br><span class="line">      res.write(buffer);</span><br><span class="line">      res.end();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;).listen(<span class="number">8080</span>);</span><br></pre></td></tr></table></figure><h2 id="2-2">querystring模块</h2><p>get请求数据在url里面，获取url里面的数据可以用querystring</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring);</span></span><br><span class="line"><span class="string">//假设get请求为 localhost:8080/a?username=1bin&amp;password=123456</span></span><br><span class="line"><span class="string">let [url, query] = req.url.split('</span>?<span class="string">');</span></span><br><span class="line"><span class="string">let get = querystring.parse(query);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">console.log(url, get);</span></span><br><span class="line"><span class="string">//url : /a</span></span><br><span class="line"><span class="string">//get : &#123;uername:'</span><span class="number">1</span>bin<span class="string">',password:'</span><span class="number">123456</span><span class="string">'&#125;</span></span><br></pre></td></tr></table></figure><p>get数据都在url里面，可以一次送达服务器，但对于post请求来说，数据都是分批送达的，此时需要将所有buffer整合为一个整体，post的body部分只有数据，可以用querystring模块解决，另外，利用req自带的两个事件，req.on(‘data’)和req.on(‘end),可以解决buffer分批接收整合的问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> querystring=<span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr=[];</span><br><span class="line">req.on(<span class="string">'data'</span>, buffer=&gt;&#123;</span><br><span class="line">  arr.push(buffer);</span><br><span class="line">&#125;);</span><br><span class="line">req.on(<span class="string">'end'</span>, ()=&gt;&#123;</span><br><span class="line">  <span class="keyword">let</span> buffer=Buffer.concat(arr);</span><br><span class="line">  <span class="keyword">let</span> post=querystring.parse(buffer.toString());</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.log(post);</span><br><span class="line">  <span class="comment">//post : &#123;uername:'1bin',password:'123456'&#125;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="2-3">url模块</h2><p>url模块比querystring模块更方便解析get数据，只需要url.parse(***,true)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url=<span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;pathname, query&#125;=url.parse(req.url, <span class="literal">true</span>);</span><br><span class="line"><span class="comment">//url.parse()第二个参数是true是会自动解析url</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">console</span>.log(pathname, query);</span><br><span class="line"><span class="comment">//pathname : /a</span></span><br><span class="line"><span class="comment">//query : &#123;uername:'1bin',password:'123456'&#125;</span></span><br></pre></td></tr></table></figure><h2 id="2-4">multiparty模块</h2><br>multiparty可以一同处理post的文件请求和普通请求，如果用原生写post文件请求则特别恶心,multiparty模块不是系统自带，需要下载<br><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> multiparty = <span class="built_in">require</span>(<span class="string">'multiparty'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> form=<span class="keyword">new</span> multiparty.Form(&#123;</span><br><span class="line">  uploadDir: <span class="string">'./upload'</span> <span class="comment">//上传到的地址</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//若上传账号和密码两个字段加一个1.txt文件</span></span><br><span class="line">form.parse(req);<span class="comment">//解析数据</span></span><br><span class="line"><span class="comment">//普通字段</span></span><br><span class="line">form.on(<span class="string">'field'</span>, (name, value)=&gt;&#123; </span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'字段：'</span>, name, value);   </span><br><span class="line">  <span class="comment">// 字段： username 1bin</span></span><br><span class="line">  <span class="comment">// 字段： password 123456</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//文件上传</span></span><br><span class="line">form.on(<span class="string">'file'</span>, (name, file)=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'文件：'</span>, name, file);</span><br><span class="line">  <span class="comment">// 文件： f1 &#123; fieldName: 'f1',</span></span><br><span class="line">  <span class="comment">//   originalFilename: '1.txt',</span></span><br><span class="line">  <span class="comment">//   path: 'upload\\T8w1Kiny20fNsWDlVPgaJ9iJ.txt',</span></span><br><span class="line">  <span class="comment">//   headers:</span></span><br><span class="line">  <span class="comment">//    &#123; 'content-disposition': 'form-data; name="f1"; filename="1.txt"',</span></span><br><span class="line">  <span class="comment">//      'content-type': 'text/plain' &#125;,</span></span><br><span class="line">  <span class="comment">//   size: 0 &#125;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//表单解析完成</span></span><br><span class="line">form.on(<span class="string">'close'</span>, ()=&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'表单解析完成'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">req.on(<span class="string">'error'</span>, err =&gt;&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br><br>假设post上传文件，前端表单enctype需要设置为”multipart/form-data”，<br><br><h2 id="2-5">接口应用</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> server = http.createServer(<span class="function">(<span class="params">req, res</span>) =&gt;</span>&#123;</span><br><span class="line">  <span class="keyword">let</span> path =<span class="string">''</span> , get =&#123;&#125;, post =&#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(req.method == <span class="string">'GET'</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> &#123;pathname, query&#125; = url.parse(req.url, <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    path = pathname;</span><br><span class="line">    get = query;</span><br><span class="line">    afterGetData()</span><br><span class="line">  &#125;<span class="keyword">else</span> <span class="keyword">if</span>(req.method == <span class="string">'POST'</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> arr =[];</span><br><span class="line"></span><br><span class="line">    req.on(<span class="string">'data'</span>, buffer =&gt;&#123;</span><br><span class="line">      arr.push(buffer);</span><br><span class="line">    &#125;);</span><br><span class="line">    req.on(<span class="string">'end'</span>, () =&gt;&#123;</span><br><span class="line">      <span class="keyword">let</span> buffer = Buffer.concat(arr);</span><br><span class="line">      </span><br><span class="line">      post = querystring.parse(buffer.toString());</span><br><span class="line">      path = req.url;</span><br><span class="line">      <span class="comment">//post的url就是地址</span></span><br><span class="line">      afterGetData();</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">//设置拿到数据后的回调函数，在这里只区分了两个接口/reg和/login，以及文件请求</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">afterGetData</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(path == <span class="string">'/reg'</span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(path == <span class="string">'/login'</span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="comment">//www 为默认文件请求文件夹</span></span><br><span class="line">      fs.readFile(<span class="string">`www<span class="subst">$&#123;path&#125;</span>`</span>, (err, buffer) =&gt;&#123;</span><br><span class="line">        <span class="keyword">if</span>(err)&#123;</span><br><span class="line">          res.writeHeader(<span class="number">404</span>);</span><br><span class="line">          res.write(<span class="string">'NOT FOUND'</span>);</span><br><span class="line">          res.end();</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">          res.write(buffer);</span><br><span class="line">          res.end();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;).listen(<span class="number">8080</span>);</span><br></pre></td></tr></table></figure><p>以上用NodeJS原生自带的模块实现了get/post请求以及文件操作，此外有个favicon.ico请求经常出现，此为goole浏览器申请网页图标的请求，而对于post上传文件参考上面的multiparty模块</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol style=&quot;background: #bdc3c7;
    border-radius: 5px;
    color: #2980b9;
    font-size: 20px;
    font-weight: bold;
    cursor: pointer;
      
    
    </summary>
    
    
      <category term="NodeJS" scheme="http://yoursite.com/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>NodeJS-原生篇1</title>
    <link href="http://yoursite.com/2019/03/29/NodeJS-%E5%8E%9F%E7%94%9F%E7%AF%871/"/>
    <id>http://yoursite.com/2019/03/29/NodeJS-原生篇1/</id>
    <published>2019-03-29T12:00:00.000Z</published>
    <updated>2019-04-01T06:32:17.757Z</updated>
    
    <content type="html"><![CDATA[<ol style="background: #bdc3c7;    border-radius: 5px;    color: #2980b9;    font-size: 20px;    font-weight: bold;    cursor: pointer;    padding-top: 10px;    padding-bottom: 10px;    text-decoration:none;    line-height:1;    width:100%;    margin:0;    list-style:none"><br>  <li style="list-decoration:none"><a href="#1-1" style="color: #4682BE;text-decoration:none;margin-left:10px">1. assert模块</a></li><br>  <li style="list-decoration:none"><a href="#1-2" style="color: #4682BE;text-decoration:none;margin-left:10px">2. path模块</a></li><br>  <li style="list-decoration:none"><a href="#1-3" style="color: #4682BE;text-decoration:none;margin-left:10px">3. url模块</a></li><br>  <li style="list-decoration:none"><a href="#1-4" style="color: #4682BE;text-decoration:none;margin-left:10px">4. querystring模块</a></li><br>  <li style="list-decoration:none"><a href="#1-5" style="color: #4682BE;text-decoration:none;margin-left:10px">5. net模块</a></li><br>  <li style="list-decoration:none"><a href="#1-6" style="color: #4682BE;text-decoration:none;margin-left:10px">6. http模块</a></li><br></ol><p>  学习NodeJS，其实是学习一些服务器，数据库知识，以及一些模块(中间件)调用的方法，本文就先从NodeJS的一些常用系统自带模块讲起</p><hr><h2 id="1-1">assert模块</h2><p>断言，在函数调用前使用，可确保参数如预期</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> assert = <span class="built_in">require</span>(<span class="string">'assert'</span>);</span><br><span class="line"></span><br><span class="line">assert(<span class="number">1</span>&gt;<span class="number">2</span>,<span class="string">'no!'</span>); <span class="comment">// no！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//assert.deepEqual(变量，预期值，msg);</span></span><br><span class="line"><span class="comment">//相当于 ==</span></span><br><span class="line"><span class="comment">//assert.deepStrictEqual(变量，预期值，msg);</span></span><br><span class="line"><span class="comment">//相当于 ===</span></span><br></pre></td></tr></table></figure><h2 id="1-2">path模块</h2><p>路径，帮助我们做路径拼装</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path =<span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">'/root/a/b/c/1.html'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(path.dirname(str)); <span class="comment">//  /root/a/b/c</span></span><br><span class="line"><span class="built_in">console</span>.log(path.extname(str)); <span class="comment">//  .html</span></span><br><span class="line"><span class="built_in">console</span>.log(path.basename(str)); <span class="comment">//  1.txt</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(path.resolve(__dirname,<span class="string">'1.txt'</span>));</span><br><span class="line"><span class="comment">//path.resolve()是做路径拼接处理的， __dirname是魔术变量，值为当前文件绝对路径</span></span><br></pre></td></tr></table></figure><h2 id="1-3">url模块</h2><p>url的解析和拼接<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> url = <span class="built_in">require</span>(<span class="string">'url'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str=<span class="string">'http://www.1bin.com:8080/a/b/1.html?a=1&amp;a=2&amp;a=3'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(url.parse(str));</span><br><span class="line"><span class="comment">// Url &#123;  protocol: 'http:',</span></span><br><span class="line"><span class="comment">// slashes: true,</span></span><br><span class="line"><span class="comment">// auth: null,</span></span><br><span class="line"><span class="comment">// host: 'www.1bin.com:8080',</span></span><br><span class="line"><span class="comment">// port: '8080',</span></span><br><span class="line"><span class="comment">// hostname: 'www.1bin.com',</span></span><br><span class="line"><span class="comment">// hash: null,</span></span><br><span class="line"><span class="comment">// search: '?a=1&amp;a=2&amp;a=3',</span></span><br><span class="line"><span class="comment">// query: 'a=1&amp;a=2&amp;a=3',</span></span><br><span class="line"><span class="comment">// pathname: '/a/b/1.html',</span></span><br><span class="line"><span class="comment">// path: '/a/b/1.html?a=1&amp;a=2&amp;a=3',</span></span><br><span class="line"><span class="comment">// href: 'http://www.bing.com:8080/a/b/1.html?a=1&amp;a=2&amp;a=3' &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(url.parse(str, <span class="literal">true</span>));</span><br><span class="line"><span class="comment">//加了true后会自动帮你把query解析成&#123; a: [ '1', '2', '3' ] &#125;</span></span><br><span class="line"><span class="comment">//这里a为数组的原因是url解析会帮你把重复变量整合成一个数组</span></span><br></pre></td></tr></table></figure></p><h2 id="1-4">querystring模块</h2><p>数据解析<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> querystring = <span class="built_in">require</span>(<span class="string">'querystring'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//parse stringify 就是数据解析与反向操作</span></span><br><span class="line"><span class="built_in">console</span>.log(querystring.parse(<span class="string">"a=1&amp;b=2&amp;c=3"</span>));</span><br><span class="line"><span class="comment">// &#123; a: '1', b: '2', c: '3' &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(querystring.stringify(&#123;<span class="attr">a</span>: <span class="number">3</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">1</span>&#125;));</span><br><span class="line"><span class="comment">// a=3&amp;b=2&amp;c=1</span></span><br></pre></td></tr></table></figure></p><h2 id="1-5">net模块</h2><p>相当于tcp协议node的实现，是http模块的超级，应用于websocket，此处暂且不谈</p><h2 id="1-6">http模块</h2><p>  http模块是实现原生NodeJS服务器链接的一个模块，主要使用方式为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> server = http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'request:'</span>,req);</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'response:'</span>,res);</span><br><span class="line">&#125;).listen(<span class="number">8080</span>);</span><br></pre></td></tr></table></figure><p>  上面的代码，实现了在本机8080端口创立服务器的功能，其中createServer方法有两个参数req，res</p><p>  把这两个参数打印出来，会发现是一个有一大堆属性的对象，在这里，我们看看一些比较重要的属性方法</p><ul><li>res.write()可以把字符串或者buffer(不能发json,可用JSON.stringify())发给服务器</li><li>res.end()是结束此次与服务器的请求，值得一提的是，write后必须要end，否则浏览器不会断开请求链接，你将接受不到服务器的响应，在浏览器界面上显示为左上角刷新圈圈一直在转。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol style=&quot;background: #bdc3c7;
    border-radius: 5px;
    color: #2980b9;
    font-size: 20px;
    font-weight: bold;
    cursor: pointer;
      
    
    </summary>
    
    
      <category term="NodeJS" scheme="http://yoursite.com/tags/NodeJS/"/>
    
  </entry>
  
  <entry>
    <title>事件循环</title>
    <link href="http://yoursite.com/2018/11/10/Event%20Loop/"/>
    <id>http://yoursite.com/2018/11/10/Event Loop/</id>
    <published>2018-11-10T03:30:00.000Z</published>
    <updated>2018-11-10T08:11:30.689Z</updated>
    
    <content type="html"><![CDATA[<hr><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>  从 JavaScript 诞生以来，JavaScript 就被设计为<strong>单线程</strong>且<strong>永不阻塞</strong>的脚本语言。</p><h2 id="单线程"><a href="#单线程" class="headerlink" title="单线程"></a>单线程</h2><p>  JavaScript 代码在任何时候都只有一个主线程处理所有的任务。</p><p>  设计为单线程的原因主要是 JavaScript 是与浏览器交互的语言，需要完成一些 DOM 操作。若将 JavaScript 设计为多线程，则可能发生下面这种情况：</p><p>  第一个线程创造了 DOM 结点，并进行了相应的 DOM 操作。<br>  第二个线程删除了该 DOM 结点。<br>  此时就遇到问题了，该 DOM 结点该如何存在？毁灭还是新生？</p><p>  因此 JavaScript 要设计成单线程。</p><p>  可是，单线程注定会限制 JavaScript 的效率，因此开发了 <strong>Web Worker</strong> 技术，该技术号称能将 JavaScript 变为多线程的语言。</p><p>  然而，该技术所开发的多线程有很多限制，例如所有新线程必须在主线程的完全控制下，不能独立执行，对于 I/O 操作，新线程更是没有这个权限进行。严格来说，<strong>Web Worker</strong> 技术并没有改变 JavaScript 是单线程的语言的实质。可以预见，JavaScript 在未来也只能是单线程的。</p><h2 id="永不阻塞"><a href="#永不阻塞" class="headerlink" title="永不阻塞"></a>永不阻塞</h2><p>  当代码中有异步任务(无法立刻返回结果的任务，如 I/O 事件),主线程可以暂时挂起该任务,然后在异步任务返回结果后再执行相应回调函数。</p><hr><h1 id="任务队列-task-queue"><a href="#任务队列-task-queue" class="headerlink" title="任务队列(task queue)"></a>任务队列(task queue)</h1><p>单线程的 JavaScript 意味着任务需要一个个来实现，若前一个任务耗时很长，后面的任务就不得不等待。</p><p>于是乎，JavaScript 的设计者意识到，如果将 I/O 操作等耗时长的任务先挂起，先运行后面的任务，等 I/O 操作等耗时长的任务返回了结果，再回头把挂起的任务完成，岂不美哉？</p><p>因此，所有任务可以分为两种，一是<strong>同步任务</strong>，另一种是<strong>异步任务</strong>。</p><p><strong>同步任务</strong>指的是，在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务。</p><p><strong>异步任务</strong>指的是，不进入主线程、而进入<strong>任务队列</strong>的任务，只有任务队列通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。</p><p>异步任务必须指定<strong>回调函数</strong>，所谓回调函数，就是会被主线程挂起来的那些代码。所谓执行异步任务。就是执行其对应的回调函数。</p><p>任务队列是个 FIFO 的数据结构，一旦主线程的任务栈中所有同步任务执行完成，任务队列中的第一个任务就会被添加到主线程。</p><hr><h1 id="事件循环-Event-Loop"><a href="#事件循环-Event-Loop" class="headerlink" title="事件循环(Event Loop)"></a>事件循环(Event Loop)</h1><p>主线程从”任务队列”中读取事件，这个过程是循环不断的，所以整个的这种运行机制又称为 Event Loop。</p><p>加入到任务队列的异步任务其实分为两种，一是宏任务，二是微任务。</p><h2 id="宏任务-macro-task-amp-微任务-micro-task"><a href="#宏任务-macro-task-amp-微任务-micro-task" class="headerlink" title="宏任务(macro task) &amp; 微任务(micro task)"></a>宏任务(macro task) &amp; 微任务(micro task)</h2><p>异步任务也有优先级，微任务高于宏任务。</p><p>以下事件属于宏任务：</p><ul><li>setTimeout()</li><li>setInterval()</li></ul><p>以下事件属于微任务：</p><ul><li>new Promise()</li></ul><p>当主线程任务栈为空时，主线程会先处理微任务队列，当微任务队列也为空时，主线程再去处理宏任务队列。</p><p>而 setTimeout 第二个延迟参数的意义，是指主线程所有同步任务，以及微任务队列所有异步任务都完成后，再生效的延迟时间。</p><p>最后附上一道题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="number">6</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  resolve()</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="number">5</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="number">3</span>)</span><br></pre></td></tr></table></figure><p>按照上面的理解，setTimeout 就是作为宏任务来存在的，而 Promise.then 则是具有代表性的微任务，上述代码的执行顺序就是按照序号来输出的。</p><p>就是说 new Promise 在实例化的过程中所执行的代码都是同步进行的，而then中注册的回调才是异步执行的。回调函数，才能进入异步。</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;  从 JavaScript 诞生以来，JavaScript 就被设计为&lt;strong&gt;单线程&lt;/strong&gt;且&lt;strong&gt;
      
    
    </summary>
    
    
      <category term="事件循环" scheme="http://yoursite.com/tags/%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/"/>
    
      <category term="任务队列" scheme="http://yoursite.com/tags/%E4%BB%BB%E5%8A%A1%E9%98%9F%E5%88%97/"/>
    
      <category term="宏任务与微任务" scheme="http://yoursite.com/tags/%E5%AE%8F%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%BE%AE%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Vue-router</title>
    <link href="http://yoursite.com/2018/11/08/vue-router/"/>
    <id>http://yoursite.com/2018/11/08/vue-router/</id>
    <published>2018-11-08T11:00:00.000Z</published>
    <updated>2018-11-10T02:03:21.116Z</updated>
    
    <content type="html"><![CDATA[<hr><p>Vue 路由用于网页跳转，相较于 a 标签，路由的优势在于不用网页刷新，不用重新进行网页请求，便可以实现组件间的跳转，从而达到网页无刷新跳转的效果。</p><hr><h1 id="安装-vue-router-模块"><a href="#安装-vue-router-模块" class="headerlink" title="安装 vue-router 模块"></a>安装 vue-router 模块</h1><p>首先默认已经自行安装配置好基本的Vue的webpack打包工具<br>可以在 package.json 文件里面的 dependencies （或 devDependencies） 查看 vue-router 是否安装好，以及安装的版本。</p><p>若无安装可在终端内输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-router --save</span><br></pre></td></tr></table></figure></p><p><strong>tips：简单区别 –save 和 –save-dev</strong></p><p> –save ：将依赖的模块添加到 dependencies 下，这是项目在发布后需要依赖的模块。<br> –save-dev : 将依赖的模块添加到 devDependencies 下，这是项目在开发过程中才需要依赖的模块。</p><hr><h1 id="实例化-VueRouter-对象"><a href="#实例化-VueRouter-对象" class="headerlink" title="实例化 VueRouter 对象"></a>实例化 VueRouter 对象</h1><p>在 main.js 下,首先引入并使用路由模块。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line">Vue.use(VueRouter)</span><br></pre></td></tr></table></figure></p><p>接着便是实例化 VueRouter 对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes:[</span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">"/"</span>,<span class="attr">component</span>:Home&#125;,  <span class="comment">// 默认的首页</span></span><br><span class="line">    &#123;<span class="attr">path</span>:<span class="string">"/helloworld"</span>,<span class="attr">component</span>:HelloWorld&#125;,</span><br><span class="line">  ],</span><br><span class="line">  mode:<span class="string">"history"</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>routes 是路由数组，基本的数组成员就是有 path 和 component 两种属性的对象。值得注意的是，这里需要 import Home 和 HelloWorld 的模板</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">'./components/HelloWorld'</span></span><br><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">'./components/Home'</span></span><br></pre></td></tr></table></figure><p>mode:”history” 可将 # 号省略掉，避免造成路径的混乱.</p><p>最后在 Vue 实例对象内使用 router。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  router, <span class="comment">//需要在 Vue 实例中使用 router</span></span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><hr><h1 id="使用-router-view-，router-link"><a href="#使用-router-view-，router-link" class="headerlink" title="使用 router-view ，router-link"></a>使用 router-view ，router-link</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/helloworld"</span>&gt;</span>HelloWorld<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/"</span>&gt;</span>Home<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><p>router-view 相当于 routers 容器，所有路由跳转的现实都在这个标签内。</p><p>router-link 相当于 a 标签的作用 ，to 后面写相对应路由。</p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;Vue 路由用于网页跳转，相较于 a 标签，路由的优势在于不用网页刷新，不用重新进行网页请求，便可以实现组件间的跳转，从而达到网页无刷新跳转的效果。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;安装-vue-router-模块&quot;&gt;&lt;a href=&quot;#安装-vue-route
      
    
    </summary>
    
    
      <category term="Vue-router" scheme="http://yoursite.com/tags/Vue-router/"/>
    
  </entry>
  
  <entry>
    <title>Promise</title>
    <link href="http://yoursite.com/2018/10/27/%E5%BC%82%E6%AD%A5Promise/"/>
    <id>http://yoursite.com/2018/10/27/异步Promise/</id>
    <published>2018-10-27T04:00:00.000Z</published>
    <updated>2018-10-28T13:34:26.589Z</updated>
    
    <content type="html"><![CDATA[<hr><p>  ES6提供了Promise对象，用来实现异步编程。</p><p>  传统的异步编程解决方案是<strong>回调函数和事件</strong>，通过不断嵌套回调函数实现逻辑上的异步，而这样的写法无疑是很复杂的，代码也很难维护。</p><hr><h1 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h1><p>  一个 Promise 有以下几种状态：</p><p>  (1) pending：初始状态，既不是成功，也不是失败状态。</p><p>  (2) fulfilled：意味着操作成功完成。</p><p>  (3) rejected：意味着操作失败。</p><p>  Promise 对象的 then 方法包含两个参数：</p><p>  onfulfilled 和 onrejected，它们都是 Function 类型</p><p>  Promise 对象的参数函数是两个由 JavaScript 引擎提供的函数 resolve 和 reject</p><p>  resolve 和 reject 函数被调用时，分别将 Promise 的状态改为 fulfilled（完成）或 rejected（失败）</p><p>  当 Promise 状态为 fulfilled 时，调用 then 的 onfulfilled方法，当 Promise 状态为 rejected 时，调用 then 的 onrejected 方法</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// ...一些立即执行的代码</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="comment">/*异步操作成功*/</span>)&#123;</span><br><span class="line">    resolve(value);</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    reject(error);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//success code resolve</span></span><br><span class="line">&#125;,err =&gt; &#123;</span><br><span class="line">  <span class="comment">// failure code reject</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h1 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h1><p>  ES6 规定，Promise 对象是一个构造函数，用来生成Promise 实例。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">promise</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'promise'</span>); <span class="comment">//立即执行</span></span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> resolve(<span class="string">'resolve'</span>);</span><br><span class="line">     &#125;,<span class="number">1000</span>)</span><br><span class="line">  &#125;); </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">  promise().then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);  </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Hey'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Console</span></span><br><span class="line"><span class="comment">  promise</span></span><br><span class="line"><span class="comment">  Hey</span></span><br><span class="line"><span class="comment">  resolve</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>  Promise 新建后就会立即执行，故先输出 promise</p><p>  then 方法指定的回调函数，就在当前所有同步任务执行完才会执行，所以最后输出 resolve</p><hr><h1 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then()"></a>Promise.prototype.then()</h1><p>  then 方法的第一个参数是 resolved 状态的回调函数，第二个参数（可选）是 rejected 状态的回调函数</p><p>  then 方法返回的是一个新的 Promise 实例（注意，不是原来那个 Promise 实例）。因此可以采用链式写法，即 then 方法后面再调用另一个 then 方法。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">promise</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">return</span> resolve(<span class="number">2</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">promise()</span><br><span class="line">.then(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val);</span><br><span class="line">  &#125;,<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">return</span> val; </span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    val++;</span><br><span class="line">    <span class="built_in">console</span>.log(val);</span><br><span class="line">  &#125;,<span class="number">0</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Console</span></span><br><span class="line"><span class="comment">  1</span></span><br><span class="line"><span class="comment">  2</span></span><br><span class="line"><span class="comment">  3</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>  在 then 方法中的返回值作为参数，传入下一个回调函数。</p><p>  如果 then 回调函数返回一个值，那么 then 返回的 Promise 对象将会成为接受状态，并接受该值作为接受状态的回调函数的参数值。</p><p>  同理 then 回调函数抛出一个错误，那么 then 返回的Promise 对象将成为接受状态，并且将抛出的错误作为拒绝状态的回调函数的参数值。</p><hr><h1 id="Promise-prototype-catch"><a href="#Promise-prototype-catch" class="headerlink" title="Promise.prototype.catch()"></a>Promise.prototype.catch()</h1><p>  catch 方法返回一个Promise，并且处理拒绝的情况。</p><p>  它的行为与调用Promise.prototype.then(undefined, onRejected) 相同。</p><p>  Promise 对象的状态一旦变为 rejected ，便不可以再改变，此时便会调用 catch 方法指定的回调函数，此外， then 方法指定的回调函数若在运行中抛出错误，也会被 catch 方法捕获</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">promise</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="comment">/*success*/</span>)&#123;</span><br><span class="line">      resolve(<span class="string">'success'</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      reject(<span class="string">'error'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">promise()</span><br><span class="line">.then( <span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//success</span></span><br><span class="line">    <span class="built_in">console</span>.log(val);</span><br><span class="line">    <span class="keyword">if</span>(<span class="comment">/*error*/</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'error'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>  Promise 对象的错误具有“冒泡”性质，会一直向后传递，直到被捕获为止。也就是说，错误总是会被下一个 catch 语句捕获。</p><p>  Promise 对象抛出的错误不会传递到外层代码，故要使用 catch 方法来捕获 Promise 对象内部抛出的错误。</p><hr><h1 id="Promise-prototype-finally"><a href="#Promise-prototype-finally" class="headerlink" title="Promise.prototype.finally()"></a>Promise.prototype.finally()</h1><p>  finally 方法返回一个 Promise，在执行 then 和catch 后，都会执行finally指定的回调函数。</p><p>  实际上，finally 与 .then(onFinally, onFinally) 类似，但也有一些区别。</p><p>  finally 不接受任何参数。并且 finally 方法总是会返回原来的值。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">  <span class="comment">// resolve 的值是 undefined</span></span><br><span class="line"><span class="built_in">Promise</span>.resolve(<span class="number">2</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;, () =&gt; &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// resolve 的值是 2</span></span><br><span class="line"><span class="built_in">Promise</span>.resolve(<span class="number">2</span>).finally(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// reject 的值是 undefined</span></span><br><span class="line"><span class="built_in">Promise</span>.reject(<span class="number">3</span>).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;, () =&gt; &#123;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// reject 的值是 3</span></span><br><span class="line"><span class="built_in">Promise</span>.reject(<span class="number">3</span>).finally(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure><hr><h1 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve()"></a>Promise.resolve()</h1><p>  将现有对象转为 Promise 对象</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="built_in">Promise</span>.resolve(<span class="number">1</span>);</span><br><span class="line"><span class="comment">//等价为</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> resolve(<span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>  其参数有四种情况：</p><p>  (1) 不带任何参数</p><p>  直接返回一个 resolved 状态的 Promise 对象</p><p>  (2) 参数不为对象，或者是不具有 then 方法的对象</p><p>  返回一个新的状态为 resolved 的 Promise 对象，此时会立即执行回调函数。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="built_in">Promise</span>.resolve(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">p1</span><br><span class="line">.then(<span class="function"><span class="params">val</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(val) ;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//会立刻弹出 1</span></span><br></pre></td></tr></table></figure><p>  (3) 参数是一个thenable对象</p><p>  thenable 对象指的是具有 then 方法的对象，Promise.resolve 方法会将这个对象转为 Promise 对象，然后就立即执行 thenable 对象的 then 方法。</p><p>  (4) 参数是一个 Promise 实例</p><p>  不做任何修改，原封不动的返回这个实例。</p><hr><h1 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject()"></a>Promise.reject()</h1><p>  Promise.reject(reason)方法也会返回一个新的 Promise 实例，该实例的状态为rejected。</p><p>  该方法和 Promise.resolve 方法类似，但 Promise.reject() 方法的参数，会原封不动的作为reject 的理由，变为后续方法的参数。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> thenable = &#123;</span><br><span class="line">  then(resolve,reject)&#123;</span><br><span class="line">    reject(<span class="string">'error'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.reject(thenable)</span><br><span class="line">.catch( <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err === thenable); <span class="comment">// true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>  上面代码中，Promise.reject 方法的参数是一个 thenable 对象，执行以后，后面 catch 方法的参数不是 reject 抛出的 ‘error’ 这个字符串，而是 thenable 对象</p><hr><h1 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h1><p>  Promise.all 方法用于将多个 Promise 实例，包装成一个新的 Promise 实例。</p><p>  Promise.all 方法接受一个数组作为参数，p1、p2、p3都是 Promise 实例，如果不是，就会先调用Promise.resolve 方法，将参数转为 Promise 实例，再进一步处理。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="built_in">Promise</span>.resolve(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="number">2</span>; <span class="comment">//Promise.all 里面将调用 Promise.resolve</span></span><br><span class="line"><span class="keyword">const</span> p3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  setTimeout(resolve(<span class="number">3</span>), <span class="number">100</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> p = [p1, p2, p3];</span><br><span class="line"><span class="built_in">Promise</span>.all(p)</span><br><span class="line">.then(<span class="function"><span class="params">values</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(values);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/*Console</span></span><br><span class="line"><span class="comment">  [1,2,3]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>  上面代码中，p的状态有两种情况：</p><p>  (1) 只有p1、p2、p3 的状态都变成 fulfilled，p的状态才会变成 fulfilled，此时 p1、p2、p3 的返回值组成一个数组，传递给p的回调函数。</p><p>  (2) 只要p1、p2、p3之中有一个被 rejected，p的状态就变成 rejected，此时第一个被 reject 的实例的返回值，会传递给p的回调函数。</p><p>  如果作为参数的 Promise 实例，自己定义了 catch 方法，那么它一旦被 rejected，并不会触发 Promise.all() 的 catch 方法。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">  reject(<span class="string">'p1 error!'</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve,reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'p2 error!'</span>);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'p2 catch '</span> + err);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.all([p1,p2])</span><br><span class="line">.catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'all catch '</span> + err);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/*Console</span></span><br><span class="line"><span class="comment">p2 catch Error: p2 error!</span></span><br><span class="line"><span class="comment">all catch p1 error!</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h1><p>  Promise.race方法同样是将多个 Promise 实例，包装成一个新的 Promise 实例。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [p1, p2, p3] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.race([p1,p2,p3]);</span><br></pre></td></tr></table></figure><p>  上面代码中，只要 p1, p2, p3 之中有一个实例率先改变状态， p的状态就跟着改变，并将率先改变的 Promise 实例作为返回值， 传递给p的回调函数。</p><p>  同样，若参数不是 Promise 实例，则将先调用 Promise.resolve 方法。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;  ES6提供了Promise对象，用来实现异步编程。&lt;/p&gt;
&lt;p&gt;  传统的异步编程解决方案是&lt;strong&gt;回调函数和事件&lt;/strong&gt;，通过不断嵌套回调函数实现逻辑上的异步，而这样的写法无疑是很复杂的，代码也很难维护。&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=
      
    
    </summary>
    
    
      <category term="Promise" scheme="http://yoursite.com/tags/Promise/"/>
    
  </entry>
  
  <entry>
    <title>解构赋值</title>
    <link href="http://yoursite.com/2018/10/13/%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/"/>
    <id>http://yoursite.com/2018/10/13/解构赋值/</id>
    <published>2018-10-13T11:33:43.000Z</published>
    <updated>2018-10-13T15:50:58.589Z</updated>
    
    <content type="html"><![CDATA[<div style="background-color:#bdc3c7; width:100%;padding:10px 20px ;margin:0 auto;color:white"><br>    <a style="color:white ;display:block;text-decoration:none;border:none" href="#1">1. 数组的解构赋值</a><br>    <a style="color:white;display:block;text-decoration:none;border:none" href="#2">2. 对象的解构赋值</a><br>    <a style="color:white;display:block;text-decoration:none;border:none" href="#3">3. 字符串的解构赋值</a><br>    <a style="color:white;display:block;text-decoration:none;border:none" href="#4">4. 数值和布尔值的解构赋值</a><br>    <a style="color:white;display:block;text-decoration:none;border:none" href="#5">5. 函数参数的解构赋值</a><br>    <a style="color:white;display:block;text-decoration:none;border:none" href="#6">6. 圆括号问题</a><br>    <a style="color:white;display:block;text-decoration:none;border:none" href="#7">7. 用途</a><br></div><div style="width:100%;height:2px;background-color:black;margin:10px 0;"></div><p>本文参考网址:<a href="http://es6.ruanyifeng.com/#docs/destructuring" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#docs/destructuring</a></p><h1 id="1">1. 数组的解构赋值</h1><h2 id="1.1">1.1 基本用法</h2><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构</p><p>ES6之前，为了给变量赋值，只能直接指定值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> c = &#123;<span class="attr">foo</span>:<span class="number">1</span>,<span class="attr">bar</span>:<span class="number">2</span>&#125;;</span><br></pre></td></tr></table></figure><p>而在ES6中，则允许这样赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, [<span class="number">1</span>,<span class="number">2</span>], &#123;<span class="attr">foo</span>:<span class="number">1</span>,<span class="attr">bar</span>:<span class="number">2</span>&#125; ] ;</span><br></pre></td></tr></table></figure><p>上面代码很清晰的展示了所谓的解构赋值，就是按照相对应的位置，对变量赋值</p><p>实际上，这种赋值方式属于模式匹配，当等号两边的模式相同时，左边的变量便会被赋值为相对应的值</p><p>下面附上一些数组的解构赋值例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, , c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line">c <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, , <span class="number">3</span>]; </span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line">b <span class="comment">// undefined</span></span><br><span class="line">c <span class="comment">// 3  </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a, [[b], c]] = [<span class="number">1</span>, [[<span class="number">2</span>], <span class="number">3</span>]]; </span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line">b <span class="comment">// 2</span></span><br><span class="line">c <span class="comment">// 3 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊的解构符号 '...'</span></span><br><span class="line"><span class="keyword">let</span> [a, ...b] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>] ;</span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line">b <span class="comment">// [2,3,4]</span></span><br></pre></td></tr></table></figure><p>如果解构不成功，变量的值为<i>undefined</i></p><p>下面附上一些数组的解构赋值不完全(部分变量解构不成功)的例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a] = [];</span><br><span class="line">a <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a, b] = [<span class="number">1</span>];</span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line">b <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//特殊的解构符号 '...'</span></span><br><span class="line"><span class="keyword">let</span> [a, b, ...c] = [<span class="number">1</span>];</span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line">b <span class="comment">// undefined</span></span><br><span class="line">c <span class="comment">// []</span></span><br></pre></td></tr></table></figure><p>当然，不完全解构，也还有另外一种情况，那就是等号左边的模式，只匹配一部分的等号右边的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line">b <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a, b, [c]] = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]];</span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line">b <span class="comment">// 2</span></span><br><span class="line">c <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>如果等号右边不是数组(或者说时不可以遍历的解构)，则会报错</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//以下代码会报错</span></span><br><span class="line"><span class="keyword">let</span> [a] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> [a] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> [a] = <span class="literal">NaN</span>;</span><br><span class="line"><span class="keyword">let</span> [a] = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> [a] = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> [a] = &#123;&#125;;</span><br></pre></td></tr></table></figure><h2 id="1.2">1.2 默认值</h2><p>解构赋值允许为变量指定默认值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a = <span class="number">1</span>] = [] ;</span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a, b = <span class="number">2</span>] = [<span class="number">1</span>]</span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line">b <span class="comment">// 2</span></span><br><span class="line">&lt;!-- 上面代码等效于下面代码 --&gt;</span><br><span class="line"><span class="keyword">let</span> [a, b = <span class="number">2</span>] = [<span class="number">1</span>, <span class="literal">undefined</span>];</span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line">b <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>ES6内部使用全等符号 ‘===’ 判断一个位置是否有值。故，只有一个数组成员严格等于undefined时，默认值才会生效</p><p>默认值也可以为表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> [ a = f() ] = [];</span><br><span class="line">a <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>默认值可以引用解构赋值的其他变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a = <span class="number">1</span>, b = a] = [];     <span class="comment">// a=1; b=1</span></span><br><span class="line"><span class="keyword">let</span> [a = <span class="number">1</span>, b = a] = [<span class="number">2</span>];    <span class="comment">// a=2; b=2</span></span><br><span class="line"><span class="keyword">let</span> [a = <span class="number">1</span>, b = a] = [<span class="number">1</span>, <span class="number">2</span>]; <span class="comment">// a=1; b=2</span></span><br><span class="line"><span class="keyword">let</span> [a = b, b = <span class="number">1</span>] = [];     <span class="comment">// ReferenceError: b is not defined</span></span><br><span class="line"><span class="comment">//报错原因是a用b做默认值时，b还没有声明</span></span><br></pre></td></tr></table></figure><p>再次强调，默认值只有当数组成员严格等于undefined时，才会调用</p><h1 id="2">对象的解构赋值</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;a, b&#125; = &#123;<span class="attr">a</span>: <span class="number">1</span> , <span class="attr">b</span>: <span class="number">2</span>&#125;;</span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line">b <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>对象的解构与数组有一个重要的不同</p><p>数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;b, a&#125; = &#123;<span class="attr">a</span>:<span class="number">1</span> ,<span class="attr">b</span>:<span class="number">2</span>&#125;;</span><br><span class="line">a <span class="comment">// 1 </span></span><br><span class="line">b <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;c&#125; = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>&#125;;</span><br><span class="line">c <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>如变量名与属性名不一致，则必须写成下面这样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">foo</span> : a&#125; = &#123;<span class="attr">foo</span> : <span class="number">1</span>, <span class="attr">a</span>:<span class="number">2</span>&#125;;</span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line">foo <span class="comment">// foo is not defined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">first</span> : a, <span class="attr">last</span> : b&#125; = &#123; <span class="attr">first</span> : <span class="number">1</span>, <span class="attr">last</span> : <span class="number">2</span>&#125;;</span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line">b <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>实际上，对象的解构赋值是下面形式的简写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">a</span>:a, <span class="attr">b</span>:b&#125; = &#123;<span class="attr">a</span>:<span class="number">1</span>, <span class="attr">b</span>:<span class="number">2</span>&#125;;</span><br></pre></td></tr></table></figure><p>也就是说，对象的解构赋值内部机制，是先找到同名属性，再给赋值给相对应的变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">foo</span> : a&#125; = &#123;<span class="attr">foo</span> : <span class="number">1</span>, <span class="attr">a</span>:<span class="number">2</span>&#125;;</span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line">foo <span class="comment">// foo is not defined</span></span><br></pre></td></tr></table></figure><p>上面代码中，foo是匹配的模式，a才是变量</p><p>再举一个解构用于嵌套结构的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    p: [</span><br><span class="line">        <span class="string">'Hello'</span>,</span><br><span class="line">        &#123; <span class="attr">y</span>: <span class="string">'World'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">p</span>: [x, &#123; y &#125;] &#125; = obj;</span><br><span class="line">x <span class="comment">// "Hello"</span></span><br><span class="line">y <span class="comment">// "World"</span></span><br></pre></td></tr></table></figure><p>这里的p是模式，不是变量。若需要将p作为变量赋值，可以写成下面这样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    p: [</span><br><span class="line">    <span class="string">'Hello'</span>,</span><br><span class="line">    &#123; <span class="attr">y</span>: <span class="string">'World'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; p, <span class="attr">p</span>: [x, &#123; y &#125;] &#125; = obj;</span><br><span class="line">x <span class="comment">// "Hello"</span></span><br><span class="line">y <span class="comment">// "World"</span></span><br><span class="line">p <span class="comment">// ["Hello", &#123;y: "World"&#125;]</span></span><br></pre></td></tr></table></figure><p>同样，对象的解构也可以指定默认值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123;x = <span class="number">3</span>&#125; = &#123;&#125;;</span><br><span class="line">x <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123;x, y = <span class="number">5</span>&#125; = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;;</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123;<span class="attr">x</span>: y = <span class="number">3</span>&#125; = &#123;&#125;;</span><br><span class="line">y <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> &#123;<span class="attr">x</span>: y = <span class="number">3</span>&#125; = &#123;<span class="attr">x</span>: <span class="number">5</span>&#125;;</span><br><span class="line">y <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>默认值生效的条件，是对象的属性值严格等于<i>undefined</i></p><p>如果解构失败，变量的值等于undefined</p><p>如果要将已经声明的变量用于解构赋值，必须非常小心</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误的写法</span></span><br><span class="line"><span class="keyword">let</span> x;</span><br><span class="line">&#123;x&#125; = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="comment">// SyntaxError: syntax error</span></span><br></pre></td></tr></table></figure><p>上面代码的写法之所以会报错，是因为JavaScript引擎会将{x}理解为一个代码块，从而发生语法错误</p><p>故不能将大括号写在行首,我们可以加一个圆括号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正确的写法</span></span><br><span class="line"><span class="keyword">let</span> x;</span><br><span class="line">(&#123;x&#125; = &#123;<span class="attr">x</span>: <span class="number">1</span>&#125;);</span><br></pre></td></tr></table></figure><h1 id="3">3. 字符串的解构赋值</h1><p><br>字符串也可以解构赋值。因为此时，字符串被转换成了一个类似数组的对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, c, d, e] = <span class="string">'Hello'</span>;</span><br><span class="line">a <span class="comment">// 'H'</span></span><br><span class="line">b <span class="comment">// 'e'</span></span><br><span class="line">c <span class="comment">// 'l'</span></span><br><span class="line">d <span class="comment">// 'l'</span></span><br><span class="line">e <span class="comment">// 'o'</span></span><br></pre></td></tr></table></figure><p>类似数组对象的<i>length</i>属性,可以对字符串的这个属性解构赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">length</span>: len&#125; = <span class="string">'Hello'</span>;</span><br><span class="line">len <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h1 id="4">4. 数值和布尔值的解构赋值</h1><p><br>解构赋值时，若等号右边是数值和布尔值，则会先转为对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">toString</span>: s&#125; = <span class="number">123</span>;</span><br><span class="line">s === <span class="built_in">Number</span>.prototype.toString <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">toString</span>: s&#125; = <span class="literal">true</span>;</span><br><span class="line">s === <span class="built_in">Boolean</span>.prototype.toString <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>上面代码中，数值和布尔值的包装对象都有toString属性，故变量s都能取到值</p><p>解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于undefined 和 null 无法转为对象，所以对它们解构赋值都会报错</p><h1 id="5">函数参数的解构赋值</h1><p><br>函数参数也可以使用解构赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">[x, y]</span>)</span>&#123;</span><br><span class="line"><span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add([<span class="number">1</span>, <span class="number">2</span>]); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>上面代码中，函数add的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量x和y。对于函数内部的代码来说，它们能感受到的参数就是x和y</p><p>可以为函数参数指定默认值</p><h1 id="6">圆括号问题</h1><p><br>解构赋值虽然方便了我们，但编译器解析起来并不容易，一个式子到底是模式，还是表达式，没办法一开始就知道。故ES6规则是，只要有可能导致解构的歧义，就不得使用圆括号</p><h2 id="6.1">不能使用圆括号的情况</h2><ol><li>变量声明语句</li></ol><p>变量声明语句，模式不能使用圆括号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全部报错</span></span><br><span class="line">    <span class="keyword">let</span> [(a)] = [<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> &#123;<span class="attr">x</span>: (c)&#125; = &#123;&#125;;</span><br><span class="line">    <span class="keyword">let</span> (&#123;<span class="attr">x</span>: c&#125;) = &#123;&#125;;</span><br><span class="line">    <span class="keyword">let</span> &#123;(x: c)&#125; = &#123;&#125;;</span><br><span class="line">    <span class="keyword">let</span> &#123;(x): c&#125; = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> &#123; <span class="attr">o</span>: (&#123; <span class="attr">p</span>: p &#125;) &#125; = &#123; <span class="attr">o</span>: &#123; <span class="attr">p</span>: <span class="number">2</span> &#125; &#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>函数参数</li></ol><p>函数参数也属于变量声明，因此不能带有圆括号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">[(z</span>)]) </span>&#123; <span class="keyword">return</span> z; &#125;</span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">[z,(x</span>)]) </span>&#123; <span class="keyword">return</span> x; &#125;</span><br></pre></td></tr></table></figure><p>3.赋值语句的模式</p><p>下面代码将整个模式放在圆括号之中，导致报错</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全部报错</span></span><br><span class="line">(&#123; <span class="attr">p</span>: a &#125;) = &#123; <span class="attr">p</span>: <span class="number">42</span> &#125;;</span><br><span class="line">([a]) = [<span class="number">5</span>];</span><br></pre></td></tr></table></figure><p>下面代码将一部分模式放在圆括号之中，导致报错</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line">[(&#123; <span class="attr">p</span>: a &#125;), &#123; <span class="attr">x</span>: c &#125;] = [&#123;&#125;, &#123;&#125;];</span><br></pre></td></tr></table></figure><h2 id="6.2">可以使用圆括号的情况</h2><p>可以使用圆括号的情况只有一种：赋值语句的非模式部分，可以使用圆括号</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[(b)] = [<span class="number">3</span>]; <span class="comment">// 正确</span></span><br><span class="line">(&#123; <span class="attr">p</span>: (d) &#125; = &#123;&#125;); <span class="comment">// 正确</span></span><br><span class="line">[(<span class="built_in">parseInt</span>.prop)] = [<span class="number">3</span>]; <span class="comment">// 正确</span></span><br></pre></td></tr></table></figure><p>上面三行语句都可以正确执行，因为首先它们都是赋值语句，而不是声明语句；其次它们的圆括号都不属于模式的一部分。第一行语句中，模式是取数组的第一个成员，跟圆括号无关；第二行语句中，模式是p，而不是d；第三行语句与第一行语句的性质一致。</p><h1 id="7.1">用途</h1><h2>1. 交换变量的值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">[x, y] = [y, x];</span><br></pre></td></tr></table></figure><h2>2. 从函数返回多个值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回一个数组</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> [a, b, c] = example();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回一个对象</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">example</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        foo: <span class="number">1</span>,</span><br><span class="line">        bar: <span class="number">2</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = example();</span><br></pre></td></tr></table></figure><h2>3. 函数参数的定义</h2><p>解构赋值可以方便地将一组参数与变量名对应起来</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数是一组有次序的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">[x, y, z]</span>) </span>&#123; ... &#125;</span><br><span class="line">f([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数是一组无次序的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">&#123;x, y, z&#125;</span>) </span>&#123; ... &#125;</span><br><span class="line">f(&#123;<span class="attr">z</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">x</span>: <span class="number">1</span>&#125;);</span><br></pre></td></tr></table></figure><h2>4. 提取JSON数据</h2><p>解构赋值对提取 JSON 对象中的数据，尤其有用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> jsonData = &#123;</span><br><span class="line">    id: <span class="number">42</span>,</span><br><span class="line">    status: <span class="string">"OK"</span>,</span><br><span class="line">    data: [<span class="number">867</span>, <span class="number">5309</span>]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; id, status, <span class="attr">data</span>: number &#125; = jsonData;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(id, status, number);</span><br><span class="line"><span class="comment">// 42, "OK", [867, 5309]</span></span><br></pre></td></tr></table></figure><h2>5. 函数参数的默认值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">jQuery.ajax = <span class="function"><span class="keyword">function</span> (<span class="params">url, &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">    async = true,</span></span></span><br><span class="line"><span class="function"><span class="params">    beforeSend = function (</span>) </span>&#123;&#125;,</span><br><span class="line">    cache = <span class="literal">true</span>,</span><br><span class="line">    complete = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">    crossDomain = <span class="literal">false</span>,</span><br><span class="line">    global = <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// ... more config</span></span><br><span class="line">&#125; = &#123;&#125;) &#123;</span><br><span class="line">    <span class="comment">// ... do stuff</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2>6. 输入模块的指定方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123;sin, cos, log&#125; = <span class="built_in">Math</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;div style=&quot;background-color:#bdc3c7; width:100%;padding:10px 20px ;margin:0 auto;color:white&quot;&gt;&lt;br&gt;    &lt;a style=&quot;color:white ;display:block;
      
    
    </summary>
    
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
      <category term="解构赋值" scheme="http://yoursite.com/tags/%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>Vue.js</title>
    <link href="http://yoursite.com/2018/10/06/Vue.js/"/>
    <id>http://yoursite.com/2018/10/06/Vue.js/</id>
    <published>2018-10-06T13:56:43.000Z</published>
    <updated>2018-10-28T12:45:00.439Z</updated>
    
    <content type="html"><![CDATA[<hr><p>前言：几天前尤雨溪介绍了即将发表的 Vue 3.0 版本，3.0版本的概要是除了渲染函数 API 和作用域插槽语法之外的所有内容都将保持不变，或者通过兼容性构建让其与 2.x 保持兼容。此文章是基于 Vue 2.x 版本写的初入门文章,主要针对Vue基础语法，模板，组件等所作的笔记。</p><hr><h1>1. Vue对象</h1>  <p>Vue.js是javaScript的框架</p><hr><h2 id="1-1-Vue-根-对象中的选项"><a href="#1-1-Vue-根-对象中的选项" class="headerlink" title="1.1 Vue(根)对象中的选项"></a>1.1 Vue(根)对象中的选项</h2><p>实例化Vue根对象时</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue()&#123;</span><br><span class="line">    el:<span class="string">"#app"</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        name:<span class="string">"1 bin"</span></span><br><span class="line">    &#125;,<span class="comment">//name 为可以调用的属性 ，vm.name 调用</span></span><br><span class="line">    methods:&#123;</span><br><span class="line">        greet: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Hello Vue!"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,<span class="comment">//greet() 为方法，调用时要加括号 ，vm.greet() 调用</span></span><br><span class="line">    computed：&#123;</span><br><span class="line">        greetName: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Hello"</span>+<span class="keyword">this</span>.name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;，<span class="comment">//greetName 为计算属性，是可以调用的属性 ，vm.greetName 调用</span></span><br><span class="line">    watch:&#123;</span><br><span class="line">        name: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Hello"</span>+<span class="keyword">this</span>.name;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  <span class="comment">//监听器不会产生新的属性，只是在原有属性变化时调用方法</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p></p><h3>el</h3><br>  Vue根组件中属性，值为html根容器元素<p></p></li><li><p></p><h3>data</h3><br>  用于各种数据的储存，是键值对对象<p></p></li><li><p></p><h3>methods</h3><br>  用于各种方法的储存，如其中一种方法被调用，则其他方法也会被调用，比较耗费性能，不设置缓存。<p></p></li><li><p></p><h3>computed</h3><br>  计算属性是基于它们的依赖进行缓存的，只有它们的依赖改变了，计算属性才会重新求值，这就意味着若依赖值没有变，计算属性将立刻返回之前的缓存值。<p></p></li><li><p></p><h3>watch</h3><br>  监听器，用来响应数据的变化，当需要在数据变化时执行异步或开销较大的操作时，这个方式是最有用的。<p></p></li></ul><hr><h2 id="1-2-Vue生命周期-钩子函数"><a href="#1-2-Vue生命周期-钩子函数" class="headerlink" title="1.2 Vue生命周期(钩子函数)"></a>1.2 Vue生命周期(钩子函数)</h2><p>钩子函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">""</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    beforeCreate:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">"组件实例化之前执行的函数"</span>)；</span><br><span class="line">    &#125;，</span><br><span class="line">    created：<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">"组件实例化完毕，但页面还未显示"</span>)；</span><br><span class="line">    &#125;，</span><br><span class="line">    beforeMount：<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">"组件挂在前，页面仍未显示，但虚拟Dom已经配置"</span>)；</span><br><span class="line">    &#125;，</span><br><span class="line">    mounted：<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">"组件挂在后，此方法执行后，页面显示"</span>)；</span><br><span class="line">    &#125;，</span><br><span class="line">    beforeUpdate:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">"组件更新前，页面仍未更新，但虚拟Dom已经配置"</span>)；</span><br><span class="line">    &#125;，</span><br><span class="line">    updated:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">"组件更新，页面显示"</span>)；</span><br><span class="line">    &#125;，</span><br><span class="line">    beforeDestory:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">"组件销毁前"</span>)；</span><br><span class="line">    &#125;，</span><br><span class="line">    destoryed:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="string">"组件销毁"</span>)；</span><br><span class="line">    &#125;，</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h1>2. Vue模板</h1><p>Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。</p><hr><h2 id="2-1-插值"><a href="#2-1-插值" class="headerlink" title="2.1 插值"></a>2.1 插值</h2><p>最常见的插值形式为双大括号文本插入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;My name is &#123;&#123; name &#125;&#125;&lt;<span class="regexp">/p&gt;</span></span><br></pre></td></tr></table></figure><p>如要将数据解释为 HTML 代码，则需要配合 v-html 指令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;p v-html = <span class="string">" HtmlCode "</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>双大括号内可以使用JavaScript表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">    &#123;&#123; number + <span class="number">1</span> &#125;&#125;</span><br><span class="line">    &#123;&#123; ok ? <span class="string">'YES'</span> : <span class="string">'NO'</span> &#125;&#125;</span><br><span class="line">    &#123;&#123; message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>) &#125;&#125;</span><br><span class="line">&lt;<span class="regexp">/p&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="2-2-指令"><a href="#2-2-指令" class="headerlink" title="2.2 指令"></a>2.2 指令</h2><p>指令 (Directives) 是带有 v- 前缀的特殊特性。指令的职责是，当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM</p><ul><li><h3>属性绑定指令 <b><a href="https://cn.vuejs.org/v2/api/#v-bind" target="_blank" rel="noopener">v-bind</a></b></h3><p>  动态地绑定一个或多个特性，或一个组件 prop 到表达式<br></p><p>  示例</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 绑定一个属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">v-bind:src</span>=<span class="string">"imageSrc"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"imageSrc"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 内联字符串拼接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"'/path/to/images/' + fileName"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- class 绑定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"&#123; red: isRed &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[classA, classB]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[classA, &#123; classB: isB, classC: isC &#125;]"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- style 绑定 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"&#123; fontSize: size + 'px' &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">"[styleObjectA, styleObjectB]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 绑定一个有属性的对象 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind</span>=<span class="string">"&#123; id: someProp, 'other-attr': otherProp &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过 prop 修饰符绑定 DOM 属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:text-content.prop</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- prop 绑定。“prop”必须在 my-component 中声明。--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:prop</span>=<span class="string">"someThing"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 通过 $props 将父组件的 props 一起传给子组件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">child-component</span> <span class="attr">v-bind</span>=<span class="string">"$props"</span>&gt;</span><span class="tag">&lt;/<span class="name">child-component</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><h3>事件绑定指令 <b><a href="https://cn.vuejs.org/v2/api/#v-on" target="_blank" rel="noopener">v-on</a></b></h3><p>  绑定事件监听器<br></p><p>  示例</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 方法处理器 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 内联语句 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"doThat('hello', $event)"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 停止冒泡 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 阻止默认行为 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.prevent</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 阻止默认行为，没有表达式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> @<span class="attr">submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--  串联修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop.prevent</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 键修饰符，键别名 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">"onEnter"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 键修饰符，键代码 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.13</span>=<span class="string">"onEnter"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 点击回调只会触发一次 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click.once</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 对象语法 (2.4.0+) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on</span>=<span class="string">"&#123; mousedown: doThis, mouseup: doThat &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><h3><b><a href="https://cn.vuejs.org/v2/guide/conditional.html" target="_blank" rel="noopener">条件渲染</a></b>指令</h3><p>  指令：<b>v-if</b> | <b>v-else</b> | <b>v-else-if</b> | <b>v-show</b><br></p><p>  根据表达式的值的真假条件渲染元素<br></p><p>  示例</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">"type === 'A'"</span>&gt;</span></span><br><span class="line">    A</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"type === 'B'"</span>&gt;</span></span><br><span class="line">    B</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">"type === 'C'"</span>&gt;</span></span><br><span class="line">    C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span></span><br><span class="line">    Not A/B/C</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--带有 v-show 的元素始终会被渲染并保留在 DOM 中。v-show 只是简单地切换元素的 CSS 属性 display --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-show</span>=<span class="string">"ok"</span>&gt;</span>Hello!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><h3>列表渲染指令<b><a href="https://cn.vuejs.org/v2/api/#v-for" target="_blank" rel="noopener"> v-for</a></b></h3><p>  基于源数据多次渲染元素或模板块，v-for 指令需要使用 item in items 形式的特殊语法</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 基础用法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span></span><br><span class="line">&#123;&#123; item.text &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 值 val , 键 key ，数组索引 index ,数组 items  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in items"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(val, key) in object"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(val, key, index) in object"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">```    </span><br><span class="line">v-for 默认行为试着不改变整体，而是替换元素。迫使其重新排序的元素，则需要提供一个 key 的特殊属性</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">    &#123;&#123; item.text &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><h3><a href="https://cn.vuejs.org/v2/guide/forms.html" target="_blank" rel="noopener">表单输入绑定</a>指令<b><a href="https://cn.vuejs.org/v2/api/#v-model" target="_blank" rel="noopener"> v-model</a></b></h3>    <p>  在表单控件或者组件上创建双向绑定。v-model 会忽略所有表单元素的 value、checked、selected 特性的初始值而总是将 Vue 实例的数据作为数据来源。故应该通过 JavaScript 在组件的 data 选项中声明初始值。<br>  <br><br>  有时我们可能想把值绑定到 Vue 实例的一个动态属性上，这时可以用 v-bind 实现，并且这个属性的值可以不是字符串。<br><br></p><ul><li><p>文本<br><br>   </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 单行文本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">placeholder</span>=<span class="string">"edit me"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Message is: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 多行文本 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Multiline message is:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"white-space: pre-line;"</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">placeholder</span>=<span class="string">"add multiple lines"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>复选框<br><br>  </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 单个复选框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"checked"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"checkbox"</span>&gt;</span>&#123;&#123; checked &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 多个复选框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'app'</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"jack"</span> <span class="attr">value</span>=<span class="string">"Jack"</span> <span class="attr">v-model</span>=<span class="string">"checkedNames"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"jack"</span>&gt;</span>Jack<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"john"</span> <span class="attr">value</span>=<span class="string">"John"</span> <span class="attr">v-model</span>=<span class="string">"checkedNames"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"john"</span>&gt;</span>John<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"mike"</span> <span class="attr">value</span>=<span class="string">"Mike"</span> <span class="attr">v-model</span>=<span class="string">"checkedNames"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"mike"</span>&gt;</span>Mike<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Checked names: &#123;&#123; checkedNames &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  可在JS里面Vue对象data选项中设置默认值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">    checkedNames: [<span class="string">'John'</span>] <span class="comment">//默认选择John</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>单选按钮<br><br> </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"one"</span> <span class="attr">value</span>=<span class="string">"One"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"one"</span>&gt;</span>One<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"two"</span> <span class="attr">value</span>=<span class="string">"Two"</span> <span class="attr">v-model</span>=<span class="string">"picked"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"two"</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>Picked: &#123;&#123; picked &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  可在JS里面Vue对象data选项中设置默认值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el: <span class="string">'#app'</span>,</span><br><span class="line">        data: &#123;</span><br><span class="line">        picked: <span class="string">'One'</span> <span class="comment">//默认选择One</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="string">``</span><span class="string">` </span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">    - 选择框</span></span><br><span class="line"><span class="string">&lt;br&gt;</span></span><br><span class="line"><span class="string">    `</span><span class="string">``</span>html</span><br><span class="line">    &lt;!-- 单选时 Js Vue对象data选项 selected:<span class="string">''</span> 只需绑定一个值--&gt;</span><br><span class="line">    &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">        &lt;select v-model=<span class="string">"selected"</span>&gt;</span><br><span class="line">            &lt;option disabled value=<span class="string">""</span>&gt;请选择&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">            &lt;option&gt;A&lt;/</span>option&gt;</span><br><span class="line">            &lt;option&gt;B&lt;<span class="regexp">/option&gt;</span></span><br><span class="line"><span class="regexp">            &lt;option&gt;C&lt;/</span>option&gt;</span><br><span class="line">        &lt;<span class="regexp">/select&gt;</span></span><br><span class="line"><span class="regexp">        &lt;span&gt;Selected: &#123;&#123; selected &#125;&#125;&lt;/</span>span&gt;</span><br><span class="line">    &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;!-- 多选时 Js Vue对象data选项 selected:[] 只需绑定一个数组--&gt;</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><hr><h1>3. Vue组件初级</h1><p>组件是可复用的Vue实例，故其与根组件有相同的选项，如data，methods，computed，watch，以及生命周期钩子函数，但它没有el选项。</p><hr><h2 id="3-1-子组件基本示例"><a href="#3-1-子组件基本示例" class="headerlink" title="3.1 子组件基本示例"></a>3.1 子组件基本示例</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义一个名为 button-counter 的新组件</span></span><br><span class="line">Vue.component(<span class="string">'button-counter'</span>, &#123;</span><br><span class="line">  data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      count: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  template: <span class="string">'&lt;button v-on:click="count++"&gt;You clicked me &#123;&#123; count &#125;&#125; times.&lt;/button&gt;'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">/* 组件是可复用的 Vue 实例，且带有一个名字：在这个例子中是 &lt;button-counter&gt;。我们可以在一个通过 new Vue 创建的 Vue 根实例中，把这个组件作为自定义元素来使用：</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&lt;div id="app"&gt;</span></span><br><span class="line"><span class="comment">  &lt;button-counter&gt;&lt;/button-counter&gt;</span></span><br><span class="line"><span class="comment">&lt;/div&gt;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p><b>每个组件必须只有一个根元素</b></p><hr><h2 id="3-2-子组件选项"><a href="#3-2-子组件选项" class="headerlink" title="3.2 子组件选项"></a>3.2 子组件选项</h2><ul><li><p>data </p><p>  data必须为一个函数，因此每个实例可以维护一份被返回对象的独立的拷贝，这样避免了不同实例间的互相影响<br><br></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        count: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><a href="https://cn.vuejs.org/v2/guide/components-props.html" target="_blank" rel="noopener">Prop</a></p><p>  父组件通过Prop向子组件传递数据(子组件通过$.emit向父组件传值).Prop 是你可以在组件上注册的一些自定义特性。当一个值传递给一个 prop 特性的时候，它就变成了那个组件实例的一个属性。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'blog-post'</span>, &#123;</span><br><span class="line">    props: [<span class="string">'title'</span>],</span><br><span class="line">    template: <span class="string">'&lt;h3&gt;&#123;&#123; title &#125;&#125;&lt;/h3&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>  一个 prop 被注册之后，你就可以像这样把数据作为一个自定义特性传递进来：</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">title</span>=<span class="string">"My journey with Vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">title</span>=<span class="string">"Blogging with Vue"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blog-post</span> <span class="attr">title</span>=<span class="string">"Why Vue is so fun"</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  若要从父组件中取得数据</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        posts: [</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">title</span>: <span class="string">'My journey with Vue'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">title</span>: <span class="string">'Blogging with Vue'</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">title</span>: <span class="string">'Why Vue is so fun'</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>  使用 v-bind 来动态传递 prop</p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-post</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-for</span>=<span class="string">"post in posts"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-bind:key</span>=<span class="string">"post.id"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-bind:title</span>=<span class="string">"post.title"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  当组件越来越复杂，属性越来越多时，为每个相关的信息定义一个 prop 会变得很麻烦</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;blog-post</span><br><span class="line">    v-<span class="keyword">for</span>=<span class="string">"post in posts"</span></span><br><span class="line">    v-bind:key=<span class="string">"post.id"</span></span><br><span class="line">    v-bind:title=<span class="string">"post.title"</span></span><br><span class="line">    v-bind:content=<span class="string">"post.content"</span></span><br><span class="line">    v-bind:publishedAt=<span class="string">"post.publishedAt"</span></span><br><span class="line">    v-bind:comments=<span class="string">"post.comments"</span></span><br><span class="line">&gt;<span class="xml"><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>  则需要重构一下这个 blog-post 组件了，让它变成接受一个单独的 post prop：</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'blog-post'</span>, &#123;</span><br><span class="line">    props: [<span class="string">'post'</span>],</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div class="blog-post"&gt;</span></span><br><span class="line"><span class="string">        &lt;h3&gt;&#123;&#123; post.title &#125;&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">        &lt;div v-html="post.content"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><a href="https://cn.vuejs.org/v2/api/#template" target="_blank" rel="noopener">template</a></p><p>  在这里是html的字符串模板，会替换挂载的元素</p><p>  我们希望在根组件中直接用 </p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-post</span>&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  而不必下面这种方式调用该组件 </p>  <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blog-post</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-for</span>=<span class="string">"post in posts"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-bind:key</span>=<span class="string">"post.id"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-bind:title</span>=<span class="string">"post.title"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-bind:content</span>=<span class="string">"post.content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-bind:publishedAt</span>=<span class="string">"post.publishedAt"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-bind:comments</span>=<span class="string">"post.comments"</span></span></span><br><span class="line"><span class="tag">&gt;</span><span class="tag">&lt;/<span class="name">blog-post</span>&gt;</span></span><br></pre></td></tr></table></figure><p>  我们需要用到模板template</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Vue.component(<span class="string">'blog-post'</span>, &#123;</span><br><span class="line">    props: [<span class="string">'post'</span>],</span><br><span class="line">    template: <span class="string">`</span></span><br><span class="line"><span class="string">        &lt;div class="blog-post"&gt;</span></span><br><span class="line"><span class="string">        &lt;h3&gt;&#123;&#123; post.title &#125;&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="string">        &lt;div v-html="post.content"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="string">        &lt;/div&gt;</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><hr><p>这篇文章关于组件的部分只是基础中的基础，特别是组件注册，插槽，Prop和$emit等都还没写好，下一篇博客再写吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;前言：几天前尤雨溪介绍了即将发表的 Vue 3.0 版本，3.0版本的概要是除了渲染函数 API 和作用域插槽语法之外的所有内容都将保持不变，或者通过兼容性构建让其与 2.x 保持兼容。此文章是基于 Vue 2.x 版本写的初入门文章,主要针对Vue基础语法，模板
      
    
    </summary>
    
    
      <category term="Vue.js" scheme="http://yoursite.com/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>JSON</title>
    <link href="http://yoursite.com/2018/09/30/json/"/>
    <id>http://yoursite.com/2018/09/30/json/</id>
    <published>2018-09-30T15:56:43.000Z</published>
    <updated>2018-09-30T16:43:47.406Z</updated>
    
    <content type="html"><![CDATA[<hr><p id="head" style="display:inline-block; float:left ;font-size:1rem;line-height:1rem;"><br>    <b>文<br><br>    章<br><br>    目<br><br>    录</b><br></p><div style="display:flex;align-items:center;justify-content:center; "><br>    <div style="display:flex ;justify-content:space-around;align-items:center; font-size:0.8rem; width:100%;line-height:0.8rem;"><br>        <div><br>            <li><a href="#1"> 1 JSON简介</a></li><br>            <ul style="margin-top:0"><br>                <li><a href="#1.1"> 1.1 JSON与JavaScript</a></li><br>                <li><a href="#1.2"> 1.2 JSON与XML</a></li><br>            </ul><br>        </div><br>        <div><br>            <li><a href="#2"> 2 JSON语法</a></li><br>            <ul style="margin-top:0"><br>                <li><a href="#2.1"> 2.1 简单值</a></li><br>                <li><a href="#2.2"> 2.2 对象</a></li><br>                <li><a href="#2.3"> 2.3 数组</a></li><br>                <li><a href="#2.4"> 2.4 JSON样例代码</a></li><br>            </ul><br>        </div><br>        <div><br>            <li><a href="#3"> 3 JSON解析与序列化</a></li><br>            <ul style="margin-top:0"><br>                <li><a href="#3.1"> 3.1 stringify()</a></li><br>                <li><a href="#3.2"> 3.2 parse()</a></li><br>                <li><a href="#3.3"> 3.3 toJSON()</a></li><br>                <li><a href="#3.4"> 3.4 JSON.stringify()序列化对象的顺序</a></li><br>            </ul><br>        </div><br>    </div><br></div><hr><h1 id="1">JSON简介</h1><p>&nbsp;&nbsp;JSON：JavaScript对象表示法(<span style="color:red">J</span>ava<span style="color:red">S</span>cript <span style="color:red">O</span>bject <span style="color:red">N</span>oatation)</p><p>&nbsp;&nbsp;根据MDN的说法:</p><blockquote><p><em>JSON是一种用于序列化对象，数组，数字，字符串，布尔值和null的结构化数据的格式</em>  </p></blockquote><p>&nbsp;&nbsp;JSON基于JavaScript语法，类似XML，但却和它们有区别</p><hr><ul><li><h2 id="1.1"> JSON与JavaScript </h2><br>JSON是一种数据格式，不是一种编程语言，JSON也不从属于JavaScript</li></ul><hr><ul><li><h2 id="1.2"> JSON与XML </h2><p>JSON能够使用 <a href="&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval&quot;">eval()</a> 方法进行解析，不必创建DOM对象</p></li></ul><hr><h1 id="2">JSON语法</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;JSON的语法可以表示以下三种类型的值：</p><hr><ul><li><h2 id="2.1">简单值</h2><p>  JSON与JavaScript简单值最大区别是：<br><br></p><blockquote><ol><li>JSON字符串必须使用双引号</li><li>JSON不支持JavaScript中特殊值undefined</li></ol></blockquote></li></ul><hr><ul><li><h2 id="2.2">对象</h2><p>  JSON对象与JavaScript对象两个不同点：<br><br></p><blockquote><ol><li>没有声明变量（JSON中没有变量的概念）</li><li>没有末尾分号（因为这不是JavaScript语句，所以不需要分号）</li></ol></blockquote></li></ul><hr><ul><li><h2 id="2.3">数组</h2><p>  JSON数组采用的就是JavaScript的数组字面量形式，但没有变量和分号<br>  <br></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"Hello World!"</span>,<span class="number">3</span>,<span class="literal">true</span>,<span class="literal">null</span>,&#123;&#125;]</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li><h2 id="2.4">JSON样例代码</h2>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- <span class="built_in">JSON</span>样例 --&gt;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"String"</span>:<span class="string">"Hello World!"</span>,   &lt;!-- 字符串--&gt;</span><br><span class="line">    <span class="string">"Number"</span>:<span class="number">3</span>,                &lt;!-- 数值--&gt;</span><br><span class="line">    <span class="string">"Boolean"</span>:<span class="literal">true</span>,            &lt;!-- 布尔值--&gt;</span><br><span class="line">    <span class="string">"Null"</span>:<span class="literal">null</span>,               &lt;!-- <span class="literal">null</span>--&gt;</span><br><span class="line">    <span class="string">"_1Bin"</span>:&#123;                  &lt;!-- 对象--&gt;</span><br><span class="line">        <span class="string">"Name"</span>:<span class="string">"1bin"</span>,</span><br><span class="line">        <span class="string">"Age"</span>:<span class="number">18</span>,</span><br><span class="line">        <span class="string">"Tag"</span>:[</span><br><span class="line">            <span class="string">"Lonely patient"</span>,<span class="string">"Crazy"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="string">"Sex"</span>:&#123;</span><br><span class="line">            <span class="string">"IsBoy"</span>:<span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><hr><h1 id="3">JSON解析与序列化</h1><p>&nbsp;&nbsp;JSON对象可以直接解析为JavaScript对象</p><p>&nbsp;&nbsp;早期JSON解析器基本上就是使用JavaScript的eval()函数，但eval()存在风险，现在已经摒弃。</p><p>&nbsp;&nbsp;现在基本上都是用JSON对象的两个方法进行解析与序列化</p><hr><ul><li><h2 id="3.1">stringify()</h2><p>  stringify()把JavaScript对象序列化为JSON字符串,有三个参数</p>  <h4>JSON.stringify(value,replacer,space)</h4><blockquote><ol><li>value<br>   将要序列化成JSON字符串的JavaScript对象</li><li>replacer(可选)<br>   <strong>函数</strong>：则在序列化过程中，被序列化的值的每个属性都会经过该函数的转换和处理<br>   <strong>数组</strong>：则只有包含在这个数组中的属性名才会被序列化到最终的 JSON 字符串中<br>   <strong>null或者未提供</strong>：则对象所有的属性都会被序列化</li><li>space(可选)<br>   指定缩进用的字符串,可为一般字符串或空格。</li></ol></blockquote><p>  <em>值得注意的是，所有值为undefined的属性都会被stringify()自动忽略，所以也可以用第二个参数作为过滤器(如用switch_case筛选,但一定要记得提供default项)给特定的属性返回undefined让其消失</em><br>  <br></p><p>  <strong>使用stringify()的样例：</strong></p></li></ul><pre><code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">                title:<span class="string">"Hello World!"</span>,</span><br><span class="line">                author:&#123;</span><br><span class="line">                          name:<span class="string">"1 bin"</span></span><br><span class="line">                       &#125;</span><br><span class="line">           &#125;;</span><br><span class="line"><span class="keyword">var</span> jsonText = <span class="built_in">JSON</span>.stringify(book);</span><br><span class="line"></span><br><span class="line">&lt;!-- jsonText的值为：<span class="string">"&#123;"</span>title<span class="string">":"</span>Hello World<span class="string">","</span>author<span class="string">":&#123;"</span>name<span class="string">":"</span><span class="number">1</span> bin<span class="string">"&#125;"</span>&#125; --&gt;</span><br></pre></td></tr></table></figure></code></pre><hr><ul><li><h2 id="3.2">parse()</h2><p>  parse()把JSON字符串解析为原生JavaScript值</p>  <h4>parse(text,reviver)</h4><blockquote><ol><li>text<br>   将要被解析成JavaScript值的字符串</li><li>reviver(可选)<br>   还原函数：规定了原始值如何被解析改造，在被返回之前</li></ol></blockquote>  <h4>reviver函数</h4><p>  根据MDN：</p><blockquote><p>如果指定了 reviver 函数，则解析出的 JavaScript 值（解析值）会经过一次转换后才将被最终返回（返回值）。更具体点讲就是：解析值本身以及它所包含的所有属性，会按照一定的顺序（从最最里层的属性开始，一级级往外，最终到达顶层，也就是解析值本身）分别的去调用 reviver 函数，在调用过程中，当前属性所属的对象会作为 this 值，当前属性名和属性值会分别作为第一个和第二个参数传入 reviver 中。如果 reviver 返回 undefined，则当前属性会从所属对象中删除，如果返回了其他值，则返回的值会成为当前属性新的属性值。</p></blockquote><blockquote><p>当遍历到最顶层的值（解析值）时，传入 reviver 函数的参数会是空字符串 “”（因为此时已经没有真正的属性）和当前的解析值（有可能已经被修改过了），当前的 this 值会是 {“”: 修改过的解析值}，在编写 reviver 函数时，要注意到这个特例。（这个函数的遍历顺序依照：从最内层开始，按照层级顺序，依次向外遍历）</p></blockquote><p>   <strong>使用parse()的样例：</strong></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bookCopy = <span class="built_in">JSON</span>.parse(jsonText);</span><br></pre></td></tr></table></figure><p>  <em>值得注意的是，这里的jsonText的值为：”xxx”,要用双引号，对于一些代码块，需要用反逗号</em></p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book2 = <span class="string">`&#123;</span></span><br><span class="line"><span class="string">                "a":"Hello Wolrd!",</span></span><br><span class="line"><span class="string">                "b":2</span></span><br><span class="line"><span class="string">             &#125;`</span>;</span><br><span class="line"><span class="keyword">var</span> Copy = <span class="built_in">JSON</span>.parse(book2);</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li><h2 id="3.3">toJSON()</h2><p>  用于补充JSON.stringify()所不能满足的自定义序列化需求。可以直接给对象定义toJSON()方法，返回其自身的JSON数据格式(如原生Date对象的toJSON方法)</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> book = &#123;</span><br><span class="line">                title:<span class="string">"Hello World!"</span>,</span><br><span class="line">                year:<span class="number">2018</span>,</span><br><span class="line">                toJSON: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">this</span>.title;</span><br><span class="line">                &#125;</span><br><span class="line">           &#125;;</span><br><span class="line"><span class="keyword">var</span> jsonText = <span class="built_in">JSON</span>.stringify(book);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(jsonText)     &lt;!-- <span class="string">"Hello World!"</span> --&gt;</span><br></pre></td></tr></table></figure></li></ul><hr><ul><li><h2 id="3.4">JSON.stringify()序列化对象的顺序</h2></li></ul><pre><code>(1)调用toJSON()方法(如果存在，若不存在，则返回对象本身)(2)应用过滤器(如存在第二个参数，传入过滤器的值是第(1)步返回的值)(3)对第(2)步返回的每个值进行相应的序列化(4)如提供了第三个参数，执行相应的格式化</code></pre><div style="color:black;diplay:flex;justify-content:center;align-items:center;"><div><a href="#head">回到目录</a></div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p id=&quot;head&quot; style=&quot;display:inline-block; float:left ;font-size:1rem;line-height:1rem;&quot;&gt;&lt;br&gt;    &lt;b&gt;文&lt;br&gt;&lt;br&gt;    章&lt;br&gt;&lt;br&gt;    目&lt;br&gt;&lt;br&gt; 
      
    
    </summary>
    
    
      <category term="JSON" scheme="http://yoursite.com/tags/JSON/"/>
    
  </entry>
  
  <entry>
    <title>暑假培训总结 (7.12 - 8.4)</title>
    <link href="http://yoursite.com/2018/08/25/summer/"/>
    <id>http://yoursite.com/2018/08/25/summer/</id>
    <published>2018-08-24T17:33:43.000Z</published>
    <updated>2018-08-25T04:12:11.459Z</updated>
    
    <content type="html"><![CDATA[<h4 id="第一个星期"><a href="#第一个星期" class="headerlink" title="第一个星期"></a>第一个星期</h4><h5 id="空调不凉，没有风扇的第一周，想它。"><a href="#空调不凉，没有风扇的第一周，想它。" class="headerlink" title="空调不凉，没有风扇的第一周，想它。"></a>空调不凉，没有风扇的第一周，想它。</h5><p>暑假培训的关键词就是热。刚开始的时候确实热到有点受不了，学东西也有点不够心静。</p><p>刚开始接触github，开始学js，看高程，写博客，算是前端刚刚入门吧。</p><p>自己学前端就是因为兴趣，所以呢学东西是越学越进状态吧，然后学得也挺快的(后来用的时候发现还是没有掌握牢固，这时候博客的作用就体现出来了)</p><p>每次写博客都感觉是自己学东西学的最细，学得最深，最投入的时候，真的是沉迷写博，日常熬夜。</p><p>第一个星期主要在调整状态，静心。</p><h4 id="第二个星期"><a href="#第二个星期" class="headerlink" title="第二个星期"></a>第二个星期</h4><h5 id="空调不凉，但有风扇的第二周，还是想它。"><a href="#空调不凉，但有风扇的第二周，还是想它。" class="headerlink" title="空调不凉，但有风扇的第二周，还是想它。"></a>空调不凉，但有风扇的第二周，还是想它。</h5><p>这个时间点呢，大家都成了老油条，各各都压点到工作室。真是应该批评！一到休息时间就相约打游戏，太可怕了吧！！！别的工作室严肃紧张，我们工作室却是轻松活泼，真的是太，，，好了吧！</p><p>第二周主要在学JQ以及一些交互的知识，为了第三周的开发做准备。</p><p>此时，前端组都还比较轻松，就设计在疯狂抠图，后台在疯狂，，学前端0.0</p><p>第二个星期主要在学习，以及体会前端地位的低下(被设计打压，被后台欺负)</p><h4 id="第三个星期"><a href="#第三个星期" class="headerlink" title="第三个星期"></a>第三个星期</h4><h6 id="空调凉些了，也有风扇的第三周，却还是想它。"><a href="#空调凉些了，也有风扇的第三周，却还是想它。" class="headerlink" title="空调凉些了，也有风扇的第三周，却还是想它。"></a>空调凉些了，也有风扇的第三周，却还是想它。</h6><p>开始做项目了，看着后台愁眉苦脸，一筹莫展，心态奔溃，我觉得还是前端的任务轻松点啊，因为 阿肥项目 没有什么动态，基本是静态，静态的样式还有重复，这对前端er来说确实不难。</p><p>于是我疯狂两天做完自己负责的六七个界面，然后看其他小伙伴都还在疯狂打码呢，再加上我觉得我做太快，做得粗糙，没注意细节，于是我又花了一天，重做了所有界面。</p><p>前端交接的时候，要用到git操作，此时，我留下了不学无术的泪水，疯狂出问题，疯狂出bug，我甚至都怀疑人生了，还好有张老板，周老板，菠萝教我。</p><p>前端交接终于问题不大了，于是就开始和后台交互，然后再次出一堆bug(这就是所谓的攘外必先安内吧)，不过这次前端er不背锅，后台小伙伴接口有问题！</p><p>于是乎，交互尚未完成，出游就已经到来，于是就0.0</p><p>第三个星期主要在前端交接代码，前后端交互，以及体会人生的绝望，不学无术只能默默流泪的无奈。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;第一个星期&quot;&gt;&lt;a href=&quot;#第一个星期&quot; class=&quot;headerlink&quot; title=&quot;第一个星期&quot;&gt;&lt;/a&gt;第一个星期&lt;/h4&gt;&lt;h5 id=&quot;空调不凉，没有风扇的第一周，想它。&quot;&gt;&lt;a href=&quot;#空调不凉，没有风扇的第一周，想它。&quot; class
      
    
    </summary>
    
    
      <category term="暑假总结" scheme="http://yoursite.com/tags/%E6%9A%91%E5%81%87%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>jQuery(part4)</title>
    <link href="http://yoursite.com/2018/07/24/12th/"/>
    <id>http://yoursite.com/2018/07/24/12th/</id>
    <published>2018-07-24T12:21:43.000Z</published>
    <updated>2018-07-24T11:14:23.471Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h2><h4 id="load-：从服务器加载数据，并把返回的数据放入被选元素中"><a href="#load-：从服务器加载数据，并把返回的数据放入被选元素中" class="headerlink" title="load() ：从服务器加载数据，并把返回的数据放入被选元素中"></a>load() ：从服务器加载数据，并把返回的数据放入被选元素中</h4><p>语法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).load(URL,data,callback)</span><br></pre></td></tr></table></figure></p><p>必需的 URL 参数规定加载的 URL。</p><p>可选的 data 参数规定与请求一同发送的查询字符串键/值对集合。</p><p>可选的 callback 参数是 load() 方法完成后所执行的函数名称。</p><p>可将jQuery选择器添加到URL参数,例如：</p><p>把 “a.txt” 文件中 id=”p1” 的元素的内容，加载到指定的 <div> 元素中</div></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#div1"</span>).load(<span class="string">"a.txt #p1"</span>);</span><br></pre></td></tr></table></figure><p>load()回调函数为callback(responseTxt,statusTxt,xhr)</p><ol><li><p>responseTxt - 包含调用成功时的结果内容</p></li><li><p>statusTXT - 包含调用的状态</p></li><li><p>xhr - 包含 XMLHttpRequest 对象</p></li></ol><h4 id="get-：通过-HTTP-GET-请求从服务器上请求数据"><a href="#get-：通过-HTTP-GET-请求从服务器上请求数据" class="headerlink" title="$.get() ：通过 HTTP GET 请求从服务器上请求数据"></a>$.get() ：通过 HTTP GET 请求从服务器上请求数据</h4><p>语法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.get(URL,callback)</span><br></pre></td></tr></table></figure></p><p>$.get()回调函数callback(data,status) </p><p>第一个回调参数存有被请求页面的内容，第二个回调参数存有请求的状态</p><h4 id="post-通过-HTTP-POST-请求向服务器提交数据"><a href="#post-通过-HTTP-POST-请求向服务器提交数据" class="headerlink" title="$.post() : 通过 HTTP POST 请求向服务器提交数据"></a>$.post() : 通过 HTTP POST 请求向服务器提交数据</h4><p>语法：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.post(URL,data,callback)</span><br></pre></td></tr></table></figure></p><p>必需的 URL 参数规定您希望请求的 URL</p><p>可选的 data 参数规定连同请求发送的数据</p><p>可选的 callback 参数是请求成功后所执行的函数名</p><p>$.post()回调函数callback(data,status) </p><p>第一个回调参数存有被请求页面的内容，第二个回调参数存有请求的状态</p><h2 id="jQuery-noConflict-方法"><a href="#jQuery-noConflict-方法" class="headerlink" title="jQuery noConflict() 方法"></a>jQuery noConflict() 方法</h2><p>jQuery使用$符号作为jQuery的简写，如果其他javascript框架也使用美元符作为简写,可通过 noConflict()方法解决命名冲突的问题 </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jq = $.noConflict();</span><br><span class="line"></span><br><span class="line">jq(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也可以直接用jQuery代替$</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;                                     </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h2><p>Jsonp可以让我们跨域读取数据</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.getJSON(URL, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p><a href="http://www.runoob.com/jquery/jquery-examples.html" target="_blank" rel="noopener">http://www.runoob.com/jquery/jquery-examples.html</a></p><h2 id="jQuery-参考手册"><a href="#jQuery-参考手册" class="headerlink" title="jQuery 参考手册"></a>jQuery 参考手册</h2><h5 id="jQuery-选择器-：http-www-runoob-com-jquery-jquery-ref-selectors-html"><a href="#jQuery-选择器-：http-www-runoob-com-jquery-jquery-ref-selectors-html" class="headerlink" title="jQuery 选择器 ：http://www.runoob.com/jquery/jquery-ref-selectors.html"></a>jQuery 选择器 ：<a href="http://www.runoob.com/jquery/jquery-ref-selectors.html" target="_blank" rel="noopener">http://www.runoob.com/jquery/jquery-ref-selectors.html</a></h5><h5 id="jQuery-事件方法-：http-www-runoob-com-jquery-jquery-ref-events-html"><a href="#jQuery-事件方法-：http-www-runoob-com-jquery-jquery-ref-events-html" class="headerlink" title="jQuery 事件方法 ：http://www.runoob.com/jquery/jquery-ref-events.html"></a>jQuery 事件方法 ：<a href="http://www.runoob.com/jquery/jquery-ref-events.html" target="_blank" rel="noopener">http://www.runoob.com/jquery/jquery-ref-events.html</a></h5><h5 id="jQuery-效果方法-：-http-www-runoob-com-jquery-jquery-ref-effects-html"><a href="#jQuery-效果方法-：-http-www-runoob-com-jquery-jquery-ref-effects-html" class="headerlink" title="jQuery 效果方法 ： http://www.runoob.com/jquery/jquery-ref-effects.html"></a>jQuery 效果方法 ： <a href="http://www.runoob.com/jquery/jquery-ref-effects.html" target="_blank" rel="noopener">http://www.runoob.com/jquery/jquery-ref-effects.html</a></h5><h5 id="jQuery-HTML-CSS-方法-：http-www-runoob-com-jquery-jquery-ref-html-html"><a href="#jQuery-HTML-CSS-方法-：http-www-runoob-com-jquery-jquery-ref-html-html" class="headerlink" title="jQuery HTML/CSS 方法 ：http://www.runoob.com/jquery/jquery-ref-html.html"></a>jQuery HTML/CSS 方法 ：<a href="http://www.runoob.com/jquery/jquery-ref-html.html" target="_blank" rel="noopener">http://www.runoob.com/jquery/jquery-ref-html.html</a></h5><h5 id="jQuery-遍历方法-：http-www-runoob-com-jquery-jquery-ref-traversing-html"><a href="#jQuery-遍历方法-：http-www-runoob-com-jquery-jquery-ref-traversing-html" class="headerlink" title="jQuery 遍历方法 ：http://www.runoob.com/jquery/jquery-ref-traversing.html"></a>jQuery 遍历方法 ：<a href="http://www.runoob.com/jquery/jquery-ref-traversing.html" target="_blank" rel="noopener">http://www.runoob.com/jquery/jquery-ref-traversing.html</a></h5><h5 id="jQuery-AJAX方法-：-http-www-runoob-com-jquery-jquery-ref-ajax-html"><a href="#jQuery-AJAX方法-：-http-www-runoob-com-jquery-jquery-ref-ajax-html" class="headerlink" title="jQuery AJAX方法 ： http://www.runoob.com/jquery/jquery-ref-ajax.html"></a>jQuery AJAX方法 ： <a href="http://www.runoob.com/jquery/jquery-ref-ajax.html" target="_blank" rel="noopener">http://www.runoob.com/jquery/jquery-ref-ajax.html</a></h5><h5 id="jQuery-杂项方法-：http-www-runoob-com-jquery-jquery-ref-misc-html"><a href="#jQuery-杂项方法-：http-www-runoob-com-jquery-jquery-ref-misc-html" class="headerlink" title="jQuery 杂项方法 ：http://www.runoob.com/jquery/jquery-ref-misc.html"></a>jQuery 杂项方法 ：<a href="http://www.runoob.com/jquery/jquery-ref-misc.html" target="_blank" rel="noopener">http://www.runoob.com/jquery/jquery-ref-misc.html</a></h5><h5 id="jQuery-属性-http-www-runoob-com-jquery-jquery-ref-prop-html"><a href="#jQuery-属性-http-www-runoob-com-jquery-jquery-ref-prop-html" class="headerlink" title="jQuery 属性 : http://www.runoob.com/jquery/jquery-ref-prop.html"></a>jQuery 属性 : <a href="http://www.runoob.com/jquery/jquery-ref-prop.html" target="_blank" rel="noopener">http://www.runoob.com/jquery/jquery-ref-prop.html</a></h5><p><strong>人生的刺，就在这里，留恋着不肯快走的，偏是你所不留恋的东西。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Ajax&quot;&gt;&lt;a href=&quot;#Ajax&quot; class=&quot;headerlink&quot; title=&quot;Ajax&quot;&gt;&lt;/a&gt;Ajax&lt;/h2&gt;&lt;h4 id=&quot;load-：从服务器加载数据，并把返回的数据放入被选元素中&quot;&gt;&lt;a href=&quot;#load-：从服务器加载数据，并
      
    
    </summary>
    
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>jQuery(part3)</title>
    <link href="http://yoursite.com/2018/07/23/tenthDay/"/>
    <id>http://yoursite.com/2018/07/23/tenthDay/</id>
    <published>2018-07-23T12:21:43.000Z</published>
    <updated>2018-07-24T07:11:10.421Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jQuery遍历方法"><a href="#jQuery遍历方法" class="headerlink" title="jQuery遍历方法"></a>jQuery遍历方法</h2><h4 id="祖先（向上遍历-DOM-树）"><a href="#祖先（向上遍历-DOM-树）" class="headerlink" title="祖先（向上遍历 DOM 树）"></a>祖先（向上遍历 DOM 树）</h4><ol><li><p>parent() , 返回被选元素的直接父元素</p></li><li><p>parents(可选参数) , 返回被选元素的所有祖先元素，它一路向上直到文档的根元素(html) </p></li><li><p>parentsUntil(参数)</p></li></ol><p>祖先部分html代码:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span> body (曾曾祖父元素)</span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span>div (曾祖父元素)</span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"ul1"</span>&gt;</span>ul (祖父元素)  </span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>li (父元素)</span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span>   </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>parent():</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'span'</span>).parent()  <span class="comment">//  返回&lt;li&gt;</span></span><br></pre></td></tr></table></figure><p>parents():</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'span'</span>).parents() ;<span class="comment">// 返回所有是&lt;span&gt;的祖先</span></span><br></pre></td></tr></table></figure><p><strong>可选参数来过滤对祖先元素的搜索</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'span'</span>).parents(<span class="string">'div'</span>) ;<span class="comment">// 返回所有是&lt;div&gt;的&lt;spa&gt;n的祖先</span></span><br></pre></td></tr></table></figure><p>parentsUntil():要带参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'span'</span>).parentsUntil(<span class="string">'div'</span>);<span class="comment">// 返回&lt;li&gt; &lt;ul&gt; ,不包括&lt;div&gt;</span></span><br></pre></td></tr></table></figure><h4 id="后代-向下遍历dom树"><a href="#后代-向下遍历dom树" class="headerlink" title="后代(向下遍历dom树)"></a>后代(向下遍历dom树)</h4><ol><li>children(可选参数) ，返回被选元素的所有直接子元素</li><li>find(参数) ， 被选元素的后代元素，一路向下直到最后一个后代</li></ol><p>后代部分html代码:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"ul1"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span> </span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>children():</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).children()  <span class="comment">// 返回所有&lt;div&gt;的所有直接子元素 &lt;ul&gt; &lt;span&gt; &lt;ul&gt;</span></span><br></pre></td></tr></table></figure><p><strong>可选参数来过滤对子元素的搜索</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).children(<span class="string">'.ul1'</span>)  <span class="comment">// 返回所有类名为 .ul的,&lt;div&gt;的直接子元素</span></span><br></pre></td></tr></table></figure><p>find(): 要带参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).find(<span class="string">'span'</span>)  <span class="comment">// 返回所有为&lt;span&gt;标签的,&lt;div&gt;的子元素</span></span><br></pre></td></tr></table></figure><p>若要全选div所有子元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).find(<span class="string">'*'</span>)</span><br></pre></td></tr></table></figure><h4 id="同胞siblings-DOM-树中水平遍历"><a href="#同胞siblings-DOM-树中水平遍历" class="headerlink" title="同胞siblings(DOM 树中水平遍历)"></a>同胞siblings(DOM 树中水平遍历)</h4><ol><li><p>siblings(可选参数),返回被选元素的所有同胞元素</p></li><li><p>next(),返回被选元素的下一个同胞元素</p></li><li><p>nextAll(),返回被选元素的所有跟随(next)的同胞元素</p></li><li><p>nextUntil(参数),返回介于两个给定参数之间的所有跟随(next)的同胞元素</p></li><li><p>prev()</p></li><li><p>prevAll()</p></li><li><p>prevUntil()</p></li></ol><p><strong>prev(), prevAll() 以及 prevUntil() 方法的工作方式与上面的方法类似，只不过方向相反而已：它们返回的是前面的同胞元素（在 DOM 树中沿着同胞之前元素遍历，而不是之后元素遍历)</strong></p><p>以next（在 DOM 树中沿着同胞之后元素遍历）为例<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>div (父元素)</span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>span<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h3</span>&gt;</span>h3<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h4</span>&gt;</span>h4<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>siblings():</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'h2'</span>).siblings();  <span class="comment">//返回 &lt;h2&gt; 的所有同胞元素 &lt;p&gt; &lt;span&gt; &lt;h3&gt; &lt;p&gt; &lt;h4&gt;</span></span><br></pre></td></tr></table></figure><p><strong>可选参数来过滤对同胞元素的搜索</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'h2'</span>).siblings(<span class="string">'p'</span>);  <span class="comment">//返回 &lt;h2&gt; 的所有同胞 &lt;p&gt;元素 &lt;p&gt; &lt;p&gt;</span></span><br></pre></td></tr></table></figure><p>next():</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"h2"</span>).next(); <span class="comment">//返回 &lt;h3&gt;</span></span><br></pre></td></tr></table></figure><p>nextAll():</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'h2'</span>).nextAll(); <span class="comment">//返回 &lt;h3&gt; &lt;p&gt; &lt;h4&gt;</span></span><br></pre></td></tr></table></figure><p>nextUntil():</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'h2'</span>).nextUntil(<span class="string">'h4'</span>);<span class="comment">//返回 &lt;h3&gt; &lt;p&gt; &lt;h4&gt;</span></span><br></pre></td></tr></table></figure><h4 id="过滤"><a href="#过滤" class="headerlink" title="过滤"></a>过滤</h4><p>下面这三个最基本的过滤方法允许基于其在一组元素中的位置来选择一个特定的元素</p><ol><li><p>first(),返回被选元素的首个元素</p></li><li><p>last(),返回被选元素的最后一个元素</p></li><li><p>eq()，返回被选元素中带有指定索引号的元素</p></li></ol><p>下面这两个选取匹配或不匹配某项指定标准的元素</p><ol start="4"><li><p>filter()，允许规定一个标准。不匹配这个标准的元素会被从集合中删除，匹配的元素会被返回</p></li><li><p>not()，返回不匹配标准的所有元素</p></li></ol><p>过滤部分的html代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"pp"</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>first():</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div p'</span>).first() <span class="comment">//返回首个 &lt;div&gt; 元素内部的第一个 &lt;p&gt; 元素  p1</span></span><br></pre></td></tr></table></figure><p>last():</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"div p"</span>).last() <span class="comment">//返回最后一个 &lt;div&gt; 元素中的最后一个 &lt;p&gt; 元素  p2</span></span><br></pre></td></tr></table></figure><p>eq() : 索引号从 0 开始，因此首个元素的索引号是 0 而不是 1。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'p'</span>).eq(<span class="number">0</span>)  <span class="comment">// 返回 p1</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'p'</span>).eq(<span class="number">2</span>)  <span class="comment">// 返回 p3</span></span><br></pre></td></tr></table></figure><p>filter():</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).filter(<span class="string">"pp"</span>)  <span class="comment">//返回所有&lt;p&gt;元素中类名为pp的&lt;p&gt;元素  p1</span></span><br></pre></td></tr></table></figure><p>not() : 与 filter() 相反</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"p"</span>).not(<span class="string">"pp"</span>)  <span class="comment">//返回所有&lt;p&gt;元素中类名不为pp的&lt;p&gt;元素  p2 p3</span></span><br></pre></td></tr></table></figure><p><strong>如果有来生，</strong><br><strong>要做一棵树，</strong><br><strong>站成永恒，</strong><br><strong>没有悲欢的姿势。</strong><br><strong>一半在土里安详，</strong><br><strong>一半在风里飞扬，</strong><br><strong>一半洒落阴凉，</strong><br><strong>一半沐浴阳光，</strong><br><strong>非常沉默非常骄傲，</strong><br><strong>从不依靠，从不寻找</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;jQuery遍历方法&quot;&gt;&lt;a href=&quot;#jQuery遍历方法&quot; class=&quot;headerlink&quot; title=&quot;jQuery遍历方法&quot;&gt;&lt;/a&gt;jQuery遍历方法&lt;/h2&gt;&lt;h4 id=&quot;祖先（向上遍历-DOM-树）&quot;&gt;&lt;a href=&quot;#祖先（向上遍历
      
    
    </summary>
    
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>jQuery(part2)</title>
    <link href="http://yoursite.com/2018/07/22/ninthDay/"/>
    <id>http://yoursite.com/2018/07/22/ninthDay/</id>
    <published>2018-07-22T12:21:43.000Z</published>
    <updated>2018-07-24T11:17:39.070Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jQuery-HTML-CSS操作"><a href="#jQuery-HTML-CSS操作" class="headerlink" title="jQuery HTML/CSS操作"></a>jQuery HTML/CSS操作</h2><h4 id="获得内容-text-、html-以及-val"><a href="#获得内容-text-、html-以及-val" class="headerlink" title="获得内容 - text()、html() 以及 val()"></a>获得内容 - text()、html() 以及 val()</h4><ol><li><p>text() - 设置或返回所选元素的文本内容（自动解析文本里面的 HTML 标签内容）</p></li><li><p>html() - 设置或返回所选元素的内容（包括 HTML 标签标记）</p></li><li><p><strong>val() - 设置或返回表单字段的值</strong></p></li></ol><h4 id="设置内容-text-、html-以及-val"><a href="#设置内容-text-、html-以及-val" class="headerlink" title="设置内容 - text()、html() 以及 val()"></a>设置内容 - text()、html() 以及 val()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#test1"</span>).text(<span class="string">"Hello world!"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">"#btn2"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#test2"</span>).html(<span class="string">"&lt;b&gt;Hello world!&lt;/b&gt;"</span>);</span><br><span class="line">&#125;);</span><br><span class="line">$(<span class="string">"#btn3"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">"#test3"</span>).val(<span class="string">"Hello world!"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>text()、html() 以及 val()，同样拥有回调函数。回调函数有两个参数：<strong>被选元素列表中当前元素的下标</strong>，以及<strong>原始（旧的）值</strong>。然后以<strong>函数新值返回您希望使用的字符串</strong>。</p><p>jQ代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  $(<span class="string">"#btn1"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    $(<span class="string">".test1"</span>).text(<span class="function"><span class="keyword">function</span>(<span class="params">i,origText</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"旧文本: "</span> + origText + <span class="string">" 新文本: Hello world! (index: "</span> + i + <span class="string">")"</span>; </span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>html代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"test1"</span>&gt;</span>这是一个有 <span class="tag">&lt;<span class="name">b</span>&gt;</span>粗体<span class="tag">&lt;/<span class="name">b</span>&gt;</span> 字的段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"test1"</span>&gt;</span>这是另外一个有 <span class="tag">&lt;<span class="name">b</span>&gt;</span>粗体<span class="tag">&lt;/<span class="name">b</span>&gt;</span> 字的段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"btn1"</span>&gt;</span>显示 新/旧 文本<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果：</p><p>旧文本: 这是一个有 粗体 字的段落。 新文本: Hello world! (index: 0)</p><p>旧文本: 这是另外一个有 粗体 字的段落。 新文本: Hello world! (index: 1)</p><h4 id="获取属性-attr"><a href="#获取属性-attr" class="headerlink" title="获取属性 - attr()"></a>获取属性 - attr()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).attr(<span class="string">'class'</span>)</span><br></pre></td></tr></table></figure><h4 id="设置属性-attr"><a href="#设置属性-attr" class="headerlink" title="设置属性 - attr()"></a>设置属性 - attr()</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).attr(<span class="string">'class'</span>,<span class="string">'container'</span>)</span><br></pre></td></tr></table></figure><p>attr() 方法也允许同时设置多个属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>.).attr(&#123;</span><br><span class="line">    <span class="string">'class'</span> : <span class="string">'container'</span> ,</span><br><span class="line">    <span class="string">'style'</span> : <span class="string">'background-color:white'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>attr()，提供回调函数。回调函数有两个参数：<strong>被选元素列表中当前元素的下标</strong>，以及<strong>原始（旧的）值</strong>。然后以<strong>函数新值返回您希望使用的字符串</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).attr(<span class="string">'class'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"> i , origValue</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> origValue + <span class="string">'/jQ'</span> ;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><ol><li><p>append() - 在被选元素的结尾插入内容</p></li><li><p>prepend() - 在被选元素的开头插入内容</p></li><li><p>after() - 在被选元素之后插入内容</p></li><li><p>before() - 在被选元素之前插入内容</p></li></ol><p>append() 方法在被选元素的结尾插入内容（仍然该元素的内部）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'p'</span>).append(<span class="string">'追加文本'</span>);</span><br></pre></td></tr></table></figure><p>prepend() 方法在被选元素的开头插入内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// $('p').prepend('在开头追加文本');</span></span><br><span class="line">$(<span class="string">'p'</span>).prepend(<span class="string">'&lt;li&gt;开头插入列表项&lt;/li&gt;'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果：</p><p>1.列表 1            ===&gt;&gt;&gt;             1.开头插入列表项<br>2.列表 2            ===&gt;&gt;&gt;      2.列表 1<br>3.列表 3            ===&gt;&gt;&gt;             3.列表 2<br>0空空空            ===&gt;&gt;&gt;            4.列表 3</p><p>append()和prepend()可以用来生成文本/html</p><p>三种生成文本的方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> txt1=<span class="string">"&lt;p&gt;文本。&lt;/p&gt;"</span>;              <span class="comment">// 使用 HTML 标签创建文本</span></span><br><span class="line"><span class="keyword">var</span> txt2=$(<span class="string">"&lt;p&gt;&lt;/p&gt;"</span>).text(<span class="string">"文本。"</span>);  <span class="comment">// 使用 jQuery 创建文本</span></span><br><span class="line"><span class="keyword">var</span> txt3=<span class="built_in">document</span>.createElement(<span class="string">"p"</span>);</span><br><span class="line"></span><br><span class="line">    txt3.innerHTML=<span class="string">"文本。"</span>;               <span class="comment">// 使用 DOM 创建文本 text with DOM</span></span><br><span class="line">    $(<span class="string">"body"</span>).append(txt1,txt2,txt3);        <span class="comment">// 追加新元素</span></span><br></pre></td></tr></table></figure><p>after() 和 before()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).before(<span class="string">'&lt;b&gt;之前&lt;/b&gt;'</span>;</span><br><span class="line"></span><br><span class="line">$(<span class="string">'div'</span>).after(<span class="string">'&lt;b&gt;之前&lt;/b&gt;'</span>);</span><br></pre></td></tr></table></figure><p>append()/prepend()和after()/before()的区别</p><p>append():</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">  &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"s1"</span>&gt;s1&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">$(<span class="string">"p"</span>).append(<span class="string">'&lt;span class="s2"&gt;s2&lt;/span&gt;'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>作用后为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">  &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"s1"</span>&gt;s1&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">  &lt;span class="s2"&gt;s2&lt;/</span>span&gt;</span><br><span class="line">&lt;<span class="regexp">/p&gt;</span></span><br></pre></td></tr></table></figure><p>after():</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">  &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"s1"</span>&gt;s1&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>p&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    $(<span class="string">"p"</span>).after(<span class="string">'&lt;span class="s2"&gt;s2&lt;/span&gt;'</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>作用后为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;</span><br><span class="line">  &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"s1"</span>&gt;s1&lt;<span class="regexp">/span&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>p&gt;</span><br><span class="line">&lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">"s2"</span>&gt;s2&lt;<span class="regexp">/span&gt;</span></span><br></pre></td></tr></table></figure><p>综上：<br>append/prepend 是在选择元素内部嵌入。<br>after/before 是在元素外面追加。</p><h4 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h4><ol><li><p>remove(可选参数) - 删除被选元素（及其子元素）</p></li><li><p>empty() - 从被选元素中删除子元素</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).remove(); <span class="comment">//整个元素删除</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'div'</span>).empty();  <span class="comment">//删除所有选中元素的子元素</span></span><br></pre></td></tr></table></figure><p>remove() 方法可接受一个参数，允许对被删元素进行过滤</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).remove(<span class="string">'.div1'</span>)  <span class="comment">//删除所有类名为div1的div元素</span></span><br></pre></td></tr></table></figure><p> remove() 的过滤器删除时，不能删除带有过滤器的子元素</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"wwww"</span>&gt;</span>www<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>hhh<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).remove(<span class="string">'.www'</span>); <span class="comment">// 错误，不可删除带过滤器的元素div的子元素p</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'p'</span>).remove(<span class="string">'.www'</span>) <span class="comment">// 删除所有类名为www的p元素</span></span><br></pre></td></tr></table></figure><h4 id="获取并设置-CSS-类"><a href="#获取并设置-CSS-类" class="headerlink" title="获取并设置 CSS 类"></a>获取并设置 CSS 类</h4><ol><li><p>addClass() - 向被选元素添加一个或多个类</p></li><li><p>removeClass() - 从被选元素删除一个或多个类</p></li><li><p>toggleClass() - 对被选元素进行添加/删除类的切换操作</p></li><li><p>css() - 设置或返回被选元素的一个或多个样式属性。</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).addClass(<span class="string">"div1 div2"</span>) <span class="comment">// 添加div1 div2 类给所有div元素</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">'div'</span>).removeClass(<span class="string">"div1 div2"</span>) <span class="comment">// 删除div1 div2 类给所有div元素</span></span><br></pre></td></tr></table></figure><p>上面代码等效于</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).toggleClass(<span class="string">"div1 div2"</span>);</span><br></pre></td></tr></table></figure><p>css()语法：</p><p>css(“propertyname”); 只会返回首个匹配元素的css样式属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"div"</span>).css(<span class="string">"background-color"</span>);  <span class="comment">//返回首个匹配元素的div的背景颜色</span></span><br></pre></td></tr></table></figure><p>若需要修改css样式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).css(<span class="string">'background-color'</span>,<span class="string">'yellow'</span>); <span class="comment">//单个</span></span><br><span class="line"></span><br><span class="line">$(<span class="string">"div"</span>).css(&#123;   <span class="comment">//修改多个</span></span><br><span class="line">    <span class="string">"background-color"</span>:<span class="string">"yellow"</span>,</span><br><span class="line">    <span class="string">"font-size"</span>:<span class="string">"2em"</span></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><h4 id="尺寸"><a href="#尺寸" class="headerlink" title="尺寸"></a>尺寸</h4><ol><li><p>width():设置或返回元素的宽度（不包括内边距、边框或外边距）</p></li><li><p>height():设置或返回元素的高度（不包括内边距、边框或外边距）</p></li><li><p>innerWidth():返回元素的宽度（包括内边距）</p></li><li><p>innerHeight():返回元素的高度（包括内边距）</p></li><li><p>outerWidth():返回元素的宽度（包括内边距和边框）</p></li><li><p>outerHeight():返回元素的高度（包括内边距和边框）</p></li></ol><p><img src="/../img/9th.gif" alt=""></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'div'</span>).width(<span class="string">'100px'</span>)   <span class="comment">//修改宽度为100px;</span></span><br></pre></td></tr></table></figure><p><strong>我明白你会来，所以我等。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;jQuery-HTML-CSS操作&quot;&gt;&lt;a href=&quot;#jQuery-HTML-CSS操作&quot; class=&quot;headerlink&quot; title=&quot;jQuery HTML/CSS操作&quot;&gt;&lt;/a&gt;jQuery HTML/CSS操作&lt;/h2&gt;&lt;h4 id=&quot;获得内容-
      
    
    </summary>
    
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>jQuery(part1)</title>
    <link href="http://yoursite.com/2018/07/21/eighthDay/"/>
    <id>http://yoursite.com/2018/07/21/eighthDay/</id>
    <published>2018-07-21T12:21:43.000Z</published>
    <updated>2018-07-24T07:10:49.441Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jQuery效果"><a href="#jQuery效果" class="headerlink" title="jQuery效果"></a>jQuery效果</h2><h4 id="入口函数"><a href="#入口函数" class="headerlink" title="入口函数"></a>入口函数</h4><p>jQuery 入口函数:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 执行代码</span></span><br><span class="line">&#125;);</span><br><span class="line">或者</span><br><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 执行代码</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>javscript入口函数:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 执行代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>两者区别：<br>jQuery 的入口函数是在 html 所有标签(DOM)都加载之后，就会去执行。<br>JavaScript 的 window.onload 事件是等到所有内容，包括外部图片之类的文件加载完后，才会执行。</p><h4 id="jQuery选择器-杂记"><a href="#jQuery选择器-杂记" class="headerlink" title="jQuery选择器(杂记)"></a>jQuery选择器(杂记)</h4><p>1.通过<figure class="highlight javascript"><figcaption><span>$(":button")``` 可以选取所有 type</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="number">2.</span>关于 **:** 和 [ ] 这两个符号的理解</span><br><span class="line">**:** 可以理解为种类的意思，如：p:first，p 的种类为第一个。</span><br><span class="line">[ ] 很自然的可以理解为属性的意思，如：[href] 选取带有 href 属性的元素。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>**:** 即为 jQuery 的过滤选择器，语法类似于 css 中的伪类选择器；其过滤选择器大概可以分为基本过滤（p:first 之类）、内容过滤（:empty）、子元素过滤(:first-child)和属性过滤 [href] 选择器。</span><br><span class="line"></span><br><span class="line">#### 隐藏和显示</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`javascript</span></span><br><span class="line"><span class="string">$(selector).hide(speed,callback);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$(selector).show(speed,callback);</span></span><br></pre></td></tr></table></figure></p><p>可选的 speed 参数规定隐藏/显示的速度，可以取以下值：”slow”、”fast” 或毫秒。<br>可选的 callback 参数是隐藏或显示完成后所执行的函数名称。</p><p>上面代码等效于toggle() 方法</p><p>示被隐藏的元素，并隐藏已显示的元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).toggle(speed,callback);</span><br></pre></td></tr></table></figure><p>对于可选的 callback 参数，有以下两点说明：<br>1.$(selector)选中的元素的个数为n个，则callback函数会执行n次；<br>2.callback函数名后加括号，会立刻执行函数体,且只会执行一次，而不是等到显示/隐藏完成后才执行；<br>3.callback既可以是函数名，也可以是匿名函数</p><h4 id="淡入淡出"><a href="#淡入淡出" class="headerlink" title="淡入淡出"></a>淡入淡出</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(selector).fadeIn(speed,callback);</span><br><span class="line"></span><br><span class="line">$(selector).fadeOut(speed,callback);</span><br></pre></td></tr></table></figure><p>等效于fadeToggle()方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).fadeToggle(speed,callback);</span><br></pre></td></tr></table></figure><p>fadeTo() 方法允许渐变为给定的不透明度（值介于 0 与 1 之间）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).fadeTo(speed,opacity,callback);</span><br></pre></td></tr></table></figure><h4 id="滑动"><a href="#滑动" class="headerlink" title="滑动"></a>滑动</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$(selector).slideDown(speed,callback);</span><br><span class="line"></span><br><span class="line">$(selector).slideUp(speed,callback);</span><br></pre></td></tr></table></figure><p>等效于slideToogle()方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$(selector).slideToggle(speed,callback);</span><br></pre></td></tr></table></figure><h4 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).animate(&#123;params&#125;,speed,callback);</span><br></pre></td></tr></table></figure><p>必需的 params 参数定义形成动画的 CSS 属性。<br>可选的 speed 参数规定效果的时长。它可以取以下值：”slow”、”fast” 或毫秒。<br>可选的 callback 参数是动画完成后所执行的函数名称。</p><p>{params}参数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"div"</span>).animate(&#123;</span><br><span class="line">     left:<span class="string">'250px'</span>,     <span class="comment">// 向右移动250px</span></span><br><span class="line">     top:<span class="string">'250px'</span>,      <span class="comment">// 向下移动250px</span></span><br><span class="line">     paddingLeft:<span class="string">'50px'</span>,</span><br><span class="line">     marginRight:<span class="string">'50px'</span>,      </span><br><span class="line">     opacity:<span class="string">'0.5'</span>,    <span class="comment">// 透明度变为0.5</span></span><br><span class="line">     height:<span class="string">'150px'</span>,   <span class="comment">// 高度变为150px</span></span><br><span class="line">     width:<span class="string">'150px'</span>     <span class="comment">// 宽度变为150px</span></span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><p>也可以定义相对值（该值相对于元素的当前值）。需要在值的前面加上 += 或 -=：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"div"</span>).animate(&#123;</span><br><span class="line">    left:<span class="string">'+=250px'</span>,</span><br><span class="line">    height:<span class="string">'+=150px'</span>,</span><br><span class="line">    width:<span class="string">'+=150px'</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>还可以把属性的动画值设置为 “show”、”hide” 或 “toggle”</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"div"</span>).animate(&#123;</span><br><span class="line">    height:<span class="string">'toggle'</span></span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure><p>编写多个 animate() 调用，jQuery 会创建包含这些方法调用的”内部”队列。然后逐一运行这些 animate 调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> div=$(<span class="string">"div"</span>);</span><br><span class="line">div.animate(&#123;<span class="attr">height</span>:<span class="string">'300px'</span>,<span class="attr">opacity</span>:<span class="string">'0.4'</span>,<span class="attr">fontSize</span>:<span class="string">'1em'</span>&#125;,<span class="string">"slow"</span>);</span><br><span class="line">div.animate(&#123;<span class="attr">width</span>:<span class="string">'300px'</span>,<span class="attr">opacity</span>:<span class="string">'0.8,'</span>fontSize:<span class="string">'2em'</span>&#125;,<span class="string">"slow"</span>);</span><br><span class="line">div.animate(&#123;<span class="attr">height</span>:<span class="string">'100px'</span>,<span class="attr">opacity</span>:<span class="string">'0.4'</span>,<span class="attr">fontSize</span>:<span class="string">'1em'</span>&#125;,<span class="string">"slow"</span>);</span><br><span class="line">div.animate(&#123;<span class="attr">width</span>:<span class="string">'100px'</span>,<span class="attr">opacity</span>:<span class="string">'0.8'</span>,<span class="attr">fontSize</span>:<span class="string">'2em'</span>&#125;,<span class="string">"slow"</span>);</span><br></pre></td></tr></table></figure><h4 id="停止动画"><a href="#停止动画" class="headerlink" title="停止动画"></a>停止动画</h4><p>jQuery stop() 方法用于停止动画或效果，在它们完成之前。<br>stop() 方法适用于所有 jQuery 效果函数，包括滑动、淡入淡出和自定义动画。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(selector).stop(stopAll,goToEnd);</span><br></pre></td></tr></table></figure><p>可选的 stopAll 参数规定是否应该清除动画队列。默认是 false，即仅停止活动的动画，允许任何排入队列的动画向后执行。<br>可选的 goToEnd 参数规定是否立即完成当前动画。默认是 false。<br>因此，默认地，stop() 会清除在被选元素上指定的当前动画。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#start"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   $(<span class="string">"div"</span>).animate(&#123;<span class="attr">left</span>:<span class="string">'100px'</span>&#125;,<span class="number">5000</span>);</span><br><span class="line">   $(<span class="string">"div"</span>).animate(&#123;<span class="attr">fontSize</span>:<span class="string">'3em'</span>&#125;,<span class="number">5000</span>);</span><br><span class="line"> &#125;);</span><br><span class="line"> </span><br><span class="line"> $(<span class="string">"#stop"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   $(<span class="string">"div"</span>).stop();</span><br><span class="line"> &#125;);<span class="comment">//停止当前激活的动画，但之后能在动画队列中激活下一个动画。</span></span><br><span class="line"></span><br><span class="line"> $(<span class="string">"#stop2"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   $(<span class="string">"div"</span>).stop(<span class="literal">true</span>);</span><br><span class="line"> &#125;);<span class="comment">//停止当前动画，并清除动画队列，所以元素的所有动画都会停止。</span></span><br><span class="line"></span><br><span class="line"> $(<span class="string">"#stop3"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">   $(<span class="string">"div"</span>).stop(<span class="literal">true</span>,<span class="literal">true</span>);</span><br><span class="line"> &#125;);<span class="comment">//快速完成当前动作，并停止所有动画。</span></span><br></pre></td></tr></table></figure><h4 id="链-Chaining"><a href="#链-Chaining" class="headerlink" title="链(Chaining)"></a>链(Chaining)</h4><p>链允许我们在一条语句中运行多个 jQuery 方法（在相同的元素上）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"#p1"</span>).css(<span class="string">"color"</span>,<span class="string">"red"</span>).slideUp(<span class="number">2000</span>).slideDown(<span class="number">2000</span>);</span><br></pre></td></tr></table></figure><p>“p1” 元素首先会变为红色，然后向上滑动，再然后向下滑动</p><p><strong>你不愿意种花。你说，你不愿意看到它一点点凋落。是的，为了避免失败，你避免了一切开始。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;jQuery效果&quot;&gt;&lt;a href=&quot;#jQuery效果&quot; class=&quot;headerlink&quot; title=&quot;jQuery效果&quot;&gt;&lt;/a&gt;jQuery效果&lt;/h2&gt;&lt;h4 id=&quot;入口函数&quot;&gt;&lt;a href=&quot;#入口函数&quot; class=&quot;headerlink&quot; 
      
    
    </summary>
    
    
      <category term="jQuery" scheme="http://yoursite.com/tags/jQuery/"/>
    
  </entry>
  
  <entry>
    <title>Ajax</title>
    <link href="http://yoursite.com/2018/07/20/ajax/"/>
    <id>http://yoursite.com/2018/07/20/ajax/</id>
    <published>2018-07-20T12:21:43.000Z</published>
    <updated>2018-07-24T07:15:53.689Z</updated>
    
    <content type="html"><![CDATA[<p>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</p><p>Ajax技术用到了：</p><ol><li><p>XMLHttpRequest 对象 (异步的与服务器交换数据)</p></li><li><p>JavaScript/DOM (信息显示/交互)</p></li><li><p>CSS (给数据定义样式)</p></li><li><p>XML (作为转换数据的格式)</p></li></ol><p>Ajax四部曲：</p><ol><li>创建 XMLHttpRequest 对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xmlHttp ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">window</span>.XMLHttpRequest)&#123;</span><br><span class="line">    <span class="comment">// IE 7+ 及主流浏览器</span></span><br><span class="line">    xmlHttp = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">// IE 6</span></span><br><span class="line">    xmlHttp = <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>向服务器发送请求</li></ol><p><strong>open(method,url,async):规定请求的类型</strong></p><p>method：请求的类型；GET 或 POST</p><p>url：文件在服务器上的位置</p><p>async：true（异步）或 false（同步）</p><p><strong>send():将请求发送到服务器</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"ajax_info.txt"</span>,<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">xmlhttp.send();</span><br></pre></td></tr></table></figure><p><strong>GET与POST</strong></p><p>GET：简单也更快</p><p>这些情况下是使用POST：</p><ol><li>无法使用缓存文件（更新服务器上的文件或数据库）</li><li>向服务器发送大量数据（POST 没有数据量限制）</li><li>发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠</li></ol><p>解决缓存问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">xmlhttp.open(<span class="string">"GET"</span>,<span class="string">"ajax_info.txt?t="</span> + <span class="built_in">Math</span>.random(),<span class="literal">true</span>);</span><br></pre></td></tr></table></figure><ol start="3"><li>获得服务器响应</li></ol><p>responseTest属性：返回字符串形式的响应</p><p>responseXML属性：获得 XML 形式的响应数据</p><p>响应服务器的响应</p><p>onreadystatechange 事件</p><p>XMLHttpRequest 对象的三个重要的属性</p><ol><li><p>onreadystatechange：存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数</p></li><li><p>readyState：    存有 XMLHttpRequest 的状态。从 0 到 4 发生变化</p><p> 0: 请求未初始化<br> 1: 服务器连接已建立<br> 2: 请求已接收<br> 3: 请求处理中<br> 4: 请求已完成，且响应已就绪</p></li><li><p>status：</p><p> 200：服务器响应正常。<br> 304：该资源在上次请求之后没有任何修改（这通常用于浏览器的缓存机制，使用GET请求时尤其需要注意）。<br> 400：无法找到请求的资源。<br> 401：访问资源的权限不够。<br> 403：没有权限访问资源。<br> 404：需要访问的资源不存在。<br> 405：需要访问的资源被禁止。<br> 407：访问的资源需要代理身份验证。<br> 500：服务器内部错误<br> 502：服务器暂时不可用，有时是为了防止发生系统过载</p></li></ol><p>判断是否成功</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(xmlhttp.readyState==<span class="number">4</span> &amp;&amp; xmlhttp.status==<span class="number">200</span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>AJAx实例：</p><p><a href="http://www.runoob.com/ajax/ajax-examples.html" target="_blank" rel="noopener">http://www.runoob.com/ajax/ajax-examples.html</a></p><p><strong>生如夏花般绚烂，死如秋叶般静美</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。&lt;/p&gt;
&lt;p&gt;Ajax技术用到了：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;XMLHttpRequest 对象 (异步的与服务器交换数据)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JavaScript/DOM (信
      
    
    </summary>
    
    
      <category term="Ajax" scheme="http://yoursite.com/tags/Ajax/"/>
    
  </entry>
  
  <entry>
    <title>IIFE 箭头函数</title>
    <link href="http://yoursite.com/2018/07/19/sixthDay/"/>
    <id>http://yoursite.com/2018/07/19/sixthDay/</id>
    <published>2018-07-19T13:33:43.000Z</published>
    <updated>2018-07-24T02:01:43.179Z</updated>
    
    <content type="html"><![CDATA[<h2 id="IIFE"><a href="#IIFE" class="headerlink" title="IIFE"></a>IIFE</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Glossary/%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Glossary/%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F</a></p><p>IIFE(立即调用函数表达式)是一个在定义时就会立即执行的JavaScript函数。</p><p>第一部分是包围在圆括号运算符() 里的一个匿名函数，这个匿名函数拥有独立的词法作用域。这不仅避免了外界访问此 IIFE 中的变量，而且又不会污染全局作用域。</p><p>第二部分再一次使用 () 创建了一个立即执行函数表达式，JavaScript 引擎到此将直接执行函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span> ;</span><br><span class="line">    <span class="built_in">console</span>.log(a) ; <span class="comment">// 1</span></span><br><span class="line">&#125;)() ;</span><br><span class="line"><span class="built_in">console</span>.log(a) ;  <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>若是想要创建一个独立的块级作用域，可以用let，不必用IIFE<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">     ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>将 IIFE 分配给一个变量，不是存储 IIFE 本身，而是存储 IIFE 执行后返回的结果</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> b = <span class="number">1</span> ;</span><br><span class="line"> <span class="built_in">console</span>.log(b);   <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">return</span> b +<span class="number">1</span> ;</span><br><span class="line">&#125;)();</span><br><span class="line"><span class="built_in">console</span>.log(a);   <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="noopener">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions</a></p><h4 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h4><ol><li><p>(参数1, 参数2, …, 参数N) =&gt; { 函数声明 }</p></li><li><p>(参数1, 参数2, …, 参数N) =&gt; 表达式（单一）<br>//相当于：(参数1, 参数2, …, 参数N) =&gt;{ return 表达式; }</p></li><li><p>// 当只有一个参数时，圆括号是可选的：<br>(单一参数) =&gt; {函数声明}<br>单一参数 =&gt; {函数声明}</p></li><li><p>// 没有参数的函数应该写成一对圆括号。<br>() =&gt; {函数声明}</p></li></ol><h4 id="不绑定this"><a href="#不绑定this" class="headerlink" title="不绑定this"></a>不绑定this</h4><p>一般函数的this指向该函数内部<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.age = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> <span class="title">growUp</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age++;    <span class="comment">// growUp()函数内部的this.age未定义</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.age)   <span class="comment">// NaN</span></span><br><span class="line">    <span class="keyword">this</span>.age = <span class="number">2</span>;  <span class="comment">// 定义growUp()函数内部的this.age</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.age);  <span class="comment">// 2</span></span><br><span class="line">  &#125;, <span class="number">1000</span>); </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure></p><p><strong>箭头函数不会创建自己的this,它只会从自己的作用域链的上一层继承this</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.age = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.age++;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.age) <span class="comment">// 1</span></span><br><span class="line">  &#125;, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure><p>因为箭头函数没有自己的this指针，通过call()或apply()方法调用一个函数时，只能传递参数(不能绑定this),他们的第一个参数会被忽略。</p><h4 id="不绑定arguments"><a href="#不绑定arguments" class="headerlink" title="不绑定arguments"></a>不绑定arguments</h4><p><strong>一般函数绑定arguments</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">arguments</span>=[<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]) ;   <span class="comment">// 1</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">1</span>]) ;   <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line">a(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure></p><p><strong>箭头函数没有内置arguments</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="built_in">arguments</span>=[<span class="number">3</span>,<span class="number">4</span>];<span class="comment">//如取消定义arguments，则会报错arguments is not defined</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function">(<span class="params">x,y</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">0</span>]) ;   <span class="comment">// 3</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>[<span class="number">1</span>]) ;   <span class="comment">// 4</span></span><br><span class="line">&#125;</span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure></p><p><strong>使用剩余参数是相较使用arguments对象的更好选择。 (…arr)</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr =[<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"><span class="keyword">var</span> f = <span class="function">(<span class="params">...arr</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(arr[<span class="number">0</span>]);          <span class="comment">// 1</span></span><br><span class="line">    <span class="built_in">console</span>.log(arr[<span class="number">1</span>]);          <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>);</span><br></pre></td></tr></table></figure><p>剩余参数和 arguments对象之间的区别主要有三个：</p><ol><li>剩余参数只包含那些没有对应形参的实参，而 arguments 对象包含了传给函数的所有实参。</li><li>arguments对象不是一个真正的数组，而剩余参数是真正的 Array实例，也就是说你能够在它上面直接使用所有的数组方法，比如 sort，map，forEach或pop。</li><li>arguments对象还有一些附加的属性 （如callee属性）。</li></ol><h4 id="不能使用new操作符"><a href="#不能使用new操作符" class="headerlink" title="不能使用new操作符"></a>不能使用new操作符</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Foo = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> Foo(); <span class="comment">// TypeError: Foo is not a constructor</span></span><br></pre></td></tr></table></figure><h4 id="没有prototype属性"><a href="#没有prototype属性" class="headerlink" title="没有prototype属性"></a>没有prototype属性</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Foo = <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(Foo.prototype); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h4 id="箭头函数注意点"><a href="#箭头函数注意点" class="headerlink" title="箭头函数注意点"></a>箭头函数注意点</h4><p><strong>返回对象字面量</strong></p><p>花括号会被解析为函数执行体，而不是return { foo: 1}，故需要将对象用括号括起来<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="params">()</span> =&gt;</span> &#123; <span class="attr">foo</span>: <span class="number">1</span> &#125;;</span><br><span class="line">func()   <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> func = <span class="function"><span class="params">()</span> =&gt;</span> (&#123; <span class="attr">foo</span>: <span class="number">1</span> &#125;);</span><br><span class="line">func()   <span class="comment">//&#123;foo: 1&#125;</span></span><br></pre></td></tr></table></figure><p><strong>不能换行写箭头函数</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f= ()</span><br><span class="line">           =&gt; <span class="number">1</span>;   <span class="comment">//报错</span></span><br></pre></td></tr></table></figure></p><p><strong>解析顺序</strong></p><p>虽然箭头函数中的箭头不是运算符，但箭头函数具有与常规函数不同的特殊运算符优先级解析规则。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> callback;</span><br><span class="line"></span><br><span class="line">callback = callback || <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// ok</span></span><br><span class="line"></span><br><span class="line">callback = callback || <span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;;      </span><br><span class="line"><span class="comment">// SyntaxError: invalid arrow-function arguments</span></span><br><span class="line"></span><br><span class="line">callback = callback || <span class="function">(<span class="params">(</span>) =&gt;</span> &#123;&#125;);    <span class="comment">// ok</span></span><br></pre></td></tr></table></figure><h4 id="箭头函数一些实例"><a href="#箭头函数一些实例" class="headerlink" title="箭头函数一些实例"></a>箭头函数一些实例</h4><p>与数组迭代方法的结合<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">5</span>, <span class="number">6</span>, <span class="number">13</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">18</span>, <span class="number">23</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = arr.reduce(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a + b);  </span><br><span class="line"><span class="comment">// 66</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> even = arr.filter(<span class="function"><span class="params">v</span> =&gt;</span> v % <span class="number">2</span> == <span class="number">0</span>); </span><br><span class="line"><span class="comment">// [6, 0, 18]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> double = arr.map(<span class="function"><span class="params">v</span> =&gt;</span> v * <span class="number">2</span>);       </span><br><span class="line"><span class="comment">// [10, 12, 26, 0, 2, 36, 46]</span></span><br></pre></td></tr></table></figure></p><p>箭头函数内定义的变量及其作用域</p><p>箭头函数内部var一个变量，外界用不到，因为箭头函数有独立块级作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> a =<span class="number">1</span> ;</span><br><span class="line">&#125;</span><br><span class="line">f();</span><br><span class="line"><span class="built_in">console</span>.log(a);   <span class="comment">//  a is not defined</span></span><br></pre></td></tr></table></figure><p>箭头函数内部不用var，为全局变量<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> f = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    a =<span class="number">1</span> ;</span><br><span class="line">&#125;</span><br><span class="line">f();</span><br><span class="line"><span class="built_in">console</span>.log(a);   <span class="comment">//  1</span></span><br></pre></td></tr></table></figure></p><p>箭头函数参数直接声明一个变量，仍为局部变量(实际上即使不用箭头函数，参数直接声明的变量都是局部变量)<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a);    <span class="comment">//1</span></span><br><span class="line"><span class="keyword">var</span> f = <span class="function">(<span class="params">a = <span class="number">1</span></span>) =&gt;</span> &#123; </span><br><span class="line">&#125;</span><br><span class="line">f();</span><br><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">//a is not defined</span></span><br></pre></td></tr></table></figure></p><p><strong>天下只有两种人。譬如一串葡萄到手，一种人挑最好的先吃，另一种人把最好的留在最后吃。照例第一种人应该乐观，因为他每吃一颗都是吃剩的葡萄里面最好的;第二种人应该悲观，因为他每吃一颗都是吃剩葡萄里最坏的。不过事实上适得其反，缘故是第二种人还有希望，第一种人只有回忆。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;IIFE&quot;&gt;&lt;a href=&quot;#IIFE&quot; class=&quot;headerlink&quot; title=&quot;IIFE&quot;&gt;&lt;/a&gt;IIFE&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Glossary/%E7
      
    
    </summary>
    
    
      <category term="IIFE" scheme="http://yoursite.com/tags/IIFE/"/>
    
      <category term="箭头函数" scheme="http://yoursite.com/tags/%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>this</title>
    <link href="http://yoursite.com/2018/07/19/seventhDay/"/>
    <id>http://yoursite.com/2018/07/19/seventhDay/</id>
    <published>2018-07-19T13:33:43.000Z</published>
    <updated>2018-07-24T02:01:31.778Z</updated>
    
    <content type="html"><![CDATA[<p>写this前，先用new操作符，call，apply，bind方法做铺垫</p><h2 id="new操作符"><a href="#new操作符" class="headerlink" title="new操作符"></a>new操作符</h2><p>当代码 new Fn(…) 执行时，会发生以下事情：</p><ol><li><p>一个继承自 Fn.prototype 的新对象被创建。</p></li><li><p>使用指定的参数调用构造函数 Fn ，并将 this 绑定到新创建的对象。</p></li><li><p>由构造函数返回的对象就是 new 表达式的结果。如果构造函数没有显式返回(return)一个对象，则使用步骤1创建的对象。（一般情况下，构造函数不返回值，但是用户可以选择主动返回对象，来覆盖正常的对象创建步骤）</p></li></ol><p>new的操作<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> Fn();</span><br></pre></td></tr></table></figure></p><p>一条代码等价于以下四步</p><ol><li>创建空对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　  <span class="keyword">var</span> obj = &#123;&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>设置新对象的constructor属性为构造函数的名称，设置新对象的<strong>proto</strong>属性指向构造函数的prototype对象</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">　 obj.__proto__ = Fn.prototype;</span><br></pre></td></tr></table></figure><ol start="3"><li><p>使用新对象调用函数，函数中的this被指向新实例对象。{}.构造函数(); Fn对象调用了含this的构造函数，故函数this指向Fn对象  </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fn.call(obj);</span><br></pre></td></tr></table></figure></li><li><p>将初始化完毕的新对象地址，保存到等号左边的变量中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = Fn;</span><br></pre></td></tr></table></figure></li></ol><p>综合四步得出过程代码为<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="keyword">this</span>.b = <span class="number">1</span> ;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> obj = &#123;&#125; ;</span><br><span class="line"> obj.__proto__ = Fn.prototype ;</span><br><span class="line"> Fn.call(obj);</span><br><span class="line"> <span class="keyword">var</span> a = obj ;</span><br><span class="line"> <span class="built_in">console</span>.log(a.b);   <span class="comment">// 1</span></span><br></pre></td></tr></table></figure></p><p>构造函数如存在返回值，要分三种情况 </p><ol><li>如果返回值是一个对象，那么this指向的就是那个返回的对象。如return {} 或 return function(){} 则this指向返回值</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">this</span>.a = <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Fn();  </span><br><span class="line"><span class="built_in">console</span>.log(f.a); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><ol start="2"><li>如果返回值不是一个对象那么this还是指向函数的实例。如 return undefined 或者return 1 ,return ‘string’</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">this</span>.a = <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">undefined</span>;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Fn();  </span><br><span class="line"><span class="built_in">console</span>.log(f.a); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><ol start="3"><li>null是对象，但this还是指向那个函数的实例。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>)  </span></span><br><span class="line"><span class="function"></span>&#123;  </span><br><span class="line">    <span class="keyword">this</span>.a = <span class="number">1</span>;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Fn();  </span><br><span class="line"><span class="built_in">console</span>.log(f.a); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>ps： 箭头函数不能进行new操作</p><h2 id="call-apply和bind"><a href="#call-apply和bind" class="headerlink" title="call,apply和bind"></a>call,apply和bind</h2><p>call()方法和apply()方法相似，第一个参数都是this值，区别在于第二个参数，call()为指定的参数列表,而apply()为参数的数组。</p><p>call()和apply()能够扩充函数赖以运行的作用域</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Window.num = <span class="number">1</span> ;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    num : <span class="number">2</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.num);   </span><br><span class="line">&#125;</span><br><span class="line">Fn();                         <span class="comment">// 1   默认Window</span></span><br><span class="line">Fn.call(obj) ;                <span class="comment">// 2</span></span><br><span class="line">Fn.call(Window);              <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>bind()方法会创建一个函数的实例，其this值会被绑定传给bind()的第一个参数，且该参数不能被重写。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Window.num = <span class="number">1</span> ;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    num : <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.num);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> oFn = Fn.bind(obj);</span><br><span class="line">oFn();    <span class="comment">//  2</span></span><br></pre></td></tr></table></figure><p>用bind()方法，不管oFn函数在哪个环境下执行，其this都被绑定到obj上。</p><h1 id="this"><a href="#this" class="headerlink" title="this"></a>this</h1><p>this指的是函数运行时所在的环境，而非函数定义时的环境，其this值在函数运行的时候才确定，并且可以更据运行环境的改变而改变。</p><p><a href="https://www.cnblogs.com/pssp/p/5216085.html" target="_blank" rel="noopener">https://www.cnblogs.com/pssp/p/5216085.html</a></p><h4 id="几个this指向的实例-以下代码都在非严格模式下运行"><a href="#几个this指向的实例-以下代码都在非严格模式下运行" class="headerlink" title="几个this指向的实例(以下代码都在非严格模式下运行)"></a>几个this指向的实例(以下代码都在非严格模式下运行)</h4><ol><li>this最终指向的是调用它的对象，这里的函数Fn实际是被Window对象所点出来的</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Window.a = <span class="number">2</span> ;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a); <span class="comment">//2</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>); <span class="comment">//Window</span></span><br><span class="line">&#125;</span><br><span class="line">Fn();  <span class="comment">// 全等于 Window.Fn(); </span></span><br><span class="line"><span class="built_in">console</span>.log(Fn === Window.Fn);   <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p>在全局定义的变量和函数其实都是给Window对象创建属性。</p><ol start="2"><li>这里的函数Fn实际上是被obj对象所调用的，this在函数运行的时候才确定，而非定义的时候。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Window.a = <span class="number">2</span> ;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a : <span class="number">1</span> ,</span><br><span class="line">    Fn : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line">obj.Fn();   <span class="comment">//    1   等效于Window.obj.Fn()   </span></span><br><span class="line"><span class="built_in">console</span>.log(obj.Fn === Window.obj.Fn) <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>Window对象通过调用obj对象来调用Fn函数，但Fn()里面的this不指向Window，原因请看第三个实例。</p><p>3.多重调用的情况</p><ol><li><p>如果一个函数中有this，但是它没有被上一级的对象所调用，那么this指向的就是Window。如实例1.</p></li><li><p>如果一个函数中有this，这个函数有被上一级的对象所调用，那么this指向的就是上一级的对象。如实例2.</p></li><li><p>果一个函数中有this，这个函数中包含多个对象，尽管这个函数是被最外层的对象所调用，this指向的也只是它上一级的对象。</p></li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a : <span class="number">1</span>,</span><br><span class="line">    b : &#123;</span><br><span class="line">        <span class="comment">// a : 2,</span></span><br><span class="line">        Fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.a); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    obj.b.Fn();   <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><p>不管上一级对象(b对象)中有没有a属性，this指向的也是对象b，因为this只会指向它的上一级对象，不管这个对象中有没有this要的东西。</p><p>4.在下面这个特殊情况下，Fn并没有被b调用，只是把obj.b.Fn的地址赋值给了f，而f()才是调用了该函数，此时相当于Window.f(),故this为Window。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">    Window.a = <span class="number">3</span></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a : <span class="number">1</span>,</span><br><span class="line">    b : &#123;</span><br><span class="line">        a : <span class="number">2</span>,</span><br><span class="line">        Fn:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.a); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">var</span> f = obj.b.Fn;</span><br><span class="line">    f();    <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="this存在的原因"><a href="#this存在的原因" class="headerlink" title="this存在的原因"></a>this存在的原因</h3><p><a href="http://www.ruanyifeng.com/blog/2018/06/javascript-this.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2018/06/javascript-this.html</a></p><h4 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h4><p>对象是属性的集合，而属性又拥有特性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span> : <span class="number">1</span> &#125;;</span><br></pre></td></tr></table></figure><p>实际上是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj =&#123;</span><br><span class="line">        a: &#123;    </span><br><span class="line">            [[value]]: <span class="number">1</span></span><br><span class="line">            [[writable]]: <span class="literal">true</span></span><br><span class="line">            [[enumerable]]: <span class="literal">true</span></span><br><span class="line">            [[configurable]]: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>若一个属性存着一个函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    Fn :&#123;  </span><br><span class="line">        [[value]]: 函数的地址</span><br><span class="line">        [[writable]]: <span class="literal">true</span></span><br><span class="line">        [[enumerable]]: <span class="literal">true</span></span><br><span class="line">        [[configurable]]: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为函数是单独的值可以在不同(上下文)环境运行(变量有作用域)</p><p>而javaScript允许在函数体内部，引用当前环境的其他变量,而函数又可以在不同环境下运行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a);  <span class="comment">//若不加this 默认为Window.a</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> obj =&#123;</span><br><span class="line">    a : <span class="number">1</span> ,</span><br><span class="line">    Fn : Fn</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">2</span>;</span><br><span class="line">Fn();        <span class="comment">// 2   在Window环境下</span></span><br><span class="line">obj.Fn();    <span class="comment">// 1   在obj环境下</span></span><br></pre></td></tr></table></figure><p>为了确定函数所调用的变量是在哪个环境下的，就需要有一种机制，能够在函数体内部获得当前的运行环境。所以，this就出现了，它的设计目的就是在函数体内部，指代函数当前的运行环境。</p><p><strong>因为无能为力,所以顺其自然。</strong><br><strong>因为心无所恃,所以随遇而安。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;写this前，先用new操作符，call，apply，bind方法做铺垫&lt;/p&gt;
&lt;h2 id=&quot;new操作符&quot;&gt;&lt;a href=&quot;#new操作符&quot; class=&quot;headerlink&quot; title=&quot;new操作符&quot;&gt;&lt;/a&gt;new操作符&lt;/h2&gt;&lt;p&gt;当代码 new Fn
      
    
    </summary>
    
    
      <category term="new" scheme="http://yoursite.com/tags/new/"/>
    
      <category term="call(),apply(),bind()" scheme="http://yoursite.com/tags/call-apply-bind/"/>
    
      <category term="this" scheme="http://yoursite.com/tags/this/"/>
    
  </entry>
  
  <entry>
    <title>原型</title>
    <link href="http://yoursite.com/2018/07/18/fifthDay/"/>
    <id>http://yoursite.com/2018/07/18/fifthDay/</id>
    <published>2018-07-18T13:33:43.000Z</published>
    <updated>2018-07-24T02:02:24.211Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://www.cnblogs.com/wangfupeng1988/p/3977987.html" target="_blank" rel="noopener">http://www.cnblogs.com/wangfupeng1988/p/3977987.html</a></p><h3 id="对象-属性-函数的关系"><a href="#对象-属性-函数的关系" class="headerlink" title="对象 属性 函数的关系"></a>对象 属性 函数的关系</h3><h6 id="一切（引用类型）都是对象，对象是属性的集合"><a href="#一切（引用类型）都是对象，对象是属性的集合" class="headerlink" title="一切（引用类型）都是对象，对象是属性的集合"></a>一切（引用类型）都是对象，对象是属性的集合</h6><p>基础类型的类型判断用typeof，引用类型的类型判断用instanceof。而基础包装类型也是对象。</p><p>对象里面只有属性，没有方法。在对象里面的方法，实际上会和属性配对。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a : <span class="number">10</span> ;</span><br><span class="line">    b : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="对象都是通过函数创建的"><a href="#对象都是通过函数创建的" class="headerlink" title="对象都是通过函数创建的"></a>对象都是通过函数创建的</h6><p>通过语法糖创建的对象或数组等，实际上都是通过Object(),Array()等函数创建的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//var obj = &#123; a: 1, b: 2 &#125;;  和下面代码等效</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj.a = <span class="number">1</span>;</span><br><span class="line">obj.b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//var arr = [1, '1', true];  和下面代码等效</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">'1'</span>;</span><br><span class="line">arr[<span class="number">2</span>] = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure><p>函数是对象，但是函数不能算是对象的子集，因为对象是由函数创建的。</p><h1 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h1><h5 id="每个函数都有一个属性叫做prototype"><a href="#每个函数都有一个属性叫做prototype" class="headerlink" title="每个函数都有一个属性叫做prototype"></a>每个函数都有一个属性叫做prototype</h5><p>这个prototype的属性值是一个对象(属性的集合),而这个对象里面有constructor的属性，指向这个函数本身。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            a: xxx</span><br><span class="line">            b: xxx</span><br><span class="line">    prototype:&#123;</span><br><span class="line">                <span class="keyword">constructor</span>: Fn()</span><br><span class="line">                a : xxx</span><br><span class="line">                b : xxx</span><br><span class="line">              &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="每个对象都有一个proto属性"><a href="#每个对象都有一个proto属性" class="headerlink" title="每个对象都有一个proto属性"></a>每个对象都有一个<strong>proto</strong>属性</h5><ol><li><p>每个对象都有一个<strong>proto</strong>属性，指向创建该对象的函数的prototype。</p></li><li><p>obj.<strong>proto</strong> === Object.prototype</p></li><li><p>Object.prototype是一个特例，它的<strong>proto</strong>指向的是null。</p></li><li><p>A Instanceof B .Instanceof的判断规则：</p></li></ol><p>沿着A的<strong>proto</strong>这条线来找，同时沿着B的prototype这条线来找，如果两条线能找到同一个引用，即同一个对象，那么就返回true。如果找到终点还未重合，则返回false。</p><p><img src="/../img/proto.png" alt=""></p><p><strong>instanceof表示的就是一种继承关系，或者原型链的结构</strong></p><h2 id="原型链-继承"><a href="#原型链-继承" class="headerlink" title="原型链(继承)"></a>原型链(继承)</h2><p>访问一个对象的属性时，先在基本属性中查找，如果没有，再沿着<strong>proto</strong>这条链向上找，这就是原型链。</p><h5 id="javascript中的继承是通过原型链来体现的"><a href="#javascript中的继承是通过原型链来体现的" class="headerlink" title="javascript中的继承是通过原型链来体现的"></a>javascript中的继承是通过原型链来体现的</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">    <span class="keyword">var</span> f = <span class="keyword">new</span> Fn();</span><br><span class="line">    f.a = <span class="number">1</span>;    <span class="comment">//  继承等级为1</span></span><br><span class="line"></span><br><span class="line">    Fn.prototype.a = <span class="number">2</span>;   <span class="comment">//继承等级为2</span></span><br><span class="line">    Fn.prototype.b = <span class="number">1</span>;   <span class="comment">//继承等级为2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个是Function.prototype  不能通过原型链到达f </span></span><br><span class="line">    Fn.__proto__.b = <span class="number">2</span> ;  </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 这个是给Object.prototype添加属性C f可通过原形链访问 继承等级为3</span></span><br><span class="line">    Fn.__proto__.__proto__.b = <span class="number">2</span> ;  </span><br><span class="line">    <span class="comment">// 这个是给Object.prototype添加属性C f可通过原形链访问 继承等级为3</span></span><br><span class="line">    Fn.__proto__.__proto__.c = <span class="number">1</span> ;  </span><br><span class="line">    <span class="comment">//  这个是给Object.prototype添加属性C f可通过原形链访问 继承等级为3</span></span><br><span class="line">    Fn.prototype.__proto__.d = <span class="number">1</span>;   </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(f.a);   <span class="comment">// 1</span></span><br><span class="line">    <span class="built_in">console</span>.log(f.b);   <span class="comment">// 1</span></span><br><span class="line">    <span class="built_in">console</span>.log(f.c);   <span class="comment">// 1</span></span><br><span class="line">    <span class="built_in">console</span>.log(f.d);   <span class="comment">// 1</span></span><br><span class="line">    <span class="built_in">console</span>.log(Fn.__proto__ === <span class="built_in">Function</span>.prototype);  <span class="comment">//true</span></span><br><span class="line">    <span class="built_in">console</span>.log(Fn.__proto__.__proto__ === <span class="built_in">Object</span>.prototype);  <span class="comment">//true</span></span><br><span class="line">    <span class="built_in">console</span>.log(Fn.prototype.__proto__ === <span class="built_in">Object</span>.prototype);  <span class="comment">// true</span></span><br><span class="line">&#125;</span><br><span class="line">a();</span><br></pre></td></tr></table></figure><p>继承等级 1&gt;2&gt;3 </p><h4 id="hasOwnProperty-NaN"><a href="#hasOwnProperty-NaN" class="headerlink" title="hasOwnProperty()"></a>hasOwnProperty()</h4><p>hasOwnProperty()来自Object.prototype，是区分一个属性到底是基本的还是从原型中找到的方法<br>在for…in…循环中<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> Fn();</span><br><span class="line"><span class="keyword">var</span> i ;</span><br><span class="line"><span class="keyword">for</span>( i <span class="keyword">in</span> f)&#123;</span><br><span class="line">    <span class="keyword">if</span>(f.hasOwnProperty(i))&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i);  <span class="comment">// 这里的属性都是f自己的，而不是继承来的</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>叶子的离开，</strong></p><p><strong>是风的多情，</strong></p><p><strong>还是树的不挽留。</strong></p><p><strong>你我的离别，</strong></p><p><strong>是人生的催促，</strong></p><p><strong>还是青春的不停留。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/wangfupeng1988/p/3977987.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.cnblogs.com/wangfupeng1988/p/397
      
    
    </summary>
    
    
      <category term="javaScript原型及原型链" scheme="http://yoursite.com/tags/javaScript%E5%8E%9F%E5%9E%8B%E5%8F%8A%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>数组迭代与归并</title>
    <link href="http://yoursite.com/2018/07/17/4thDay/"/>
    <id>http://yoursite.com/2018/07/17/4thDay/</id>
    <published>2018-07-17T13:33:43.000Z</published>
    <updated>2018-07-24T02:03:23.134Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组迭代方法"><a href="#数组迭代方法" class="headerlink" title="数组迭代方法"></a>数组迭代方法</h2><h5 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h5><p>对数组中的每一项运行给定函数，如果该函数对每一项都返回true，则返回true。 </p><h5 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h5><p>对数组中的每一项运行给定函数，返回该函数会返回true 的项组成的数组。</p><h5 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h5><p>对数组中的每一项运行给定函数。这个方法没有返回值。 </p><h5 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h5><p>对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组。 </p><h5 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h5><p>对数组中的每一项运行给定函数，如果该函数对任一项返回true，则返回true. </p><h4 id="对数组迭代方法的几点说明"><a href="#对数组迭代方法的几点说明" class="headerlink" title="对数组迭代方法的几点说明"></a>对数组迭代方法的几点说明</h4><ol><li>every()，与some()的关系就像和与或的关系，every()一假全假，some()一真全真。</li><li>filter()返回的是一个符合某种条件的数组。 </li><li>forEach()没有返回值，可代替for循环。</li><li>map()返回的是经过某种处理的数组。</li></ol><h2 id="数组归并方法"><a href="#数组归并方法" class="headerlink" title="数组归并方法"></a>数组归并方法</h2><p><a href="https://www.jianshu.com/p/2d396b10afe0" target="_blank" rel="noopener">https://www.jianshu.com/p/2d396b10afe0</a></p><h5 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a>reduce()</h5><p>迭代数组中的所有值，返回一个按条件计算的最终值。reduce是从数组的开始逐个遍历到最后。</p><p>reduce()方法接受两个参数:一个在每一项上调用的函数和（可选的）作为归并基础的初始值。</p><ol><li>调用的函数有四个参数：前一个值，当前值，项的索引和数组对象。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 reduce() 方法可以执行求数组里所有值之和的操作</span></span><br><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> sum = nums.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, cur, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(prev);  <span class="comment">// 依次输出 1， 3， 6</span></span><br><span class="line">  <span class="built_in">console</span>.log(cur);   <span class="comment">// 依次输出 2， 3， 4</span></span><br><span class="line">  <span class="built_in">console</span>.log(index); <span class="comment">// 依次输出 1, 2, 3</span></span><br><span class="line">  <span class="built_in">console</span>.log(array); <span class="comment">// 每次都输出原数组 [1,2,3,4]</span></span><br><span class="line">  <span class="keyword">return</span> prev + cur;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(sum); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><ol start="2"><li>归并基础的初始值也规定了归并的数据类型，数组可以用{}，数字可以用0。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"><span class="keyword">var</span> a= <span class="number">5</span>;</span><br><span class="line"><span class="keyword">var</span> sum = nums.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, cur, index, array</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(prev);  <span class="comment">// 依次输出 5， 6， 8， 11</span></span><br><span class="line">  <span class="built_in">console</span>.log(cur);   <span class="comment">// 依次输出 1， 2， 3， 4</span></span><br><span class="line">  <span class="built_in">console</span>.log(index); <span class="comment">// 依次输出 0,  1,  2,  3</span></span><br><span class="line">  <span class="built_in">console</span>.log(array); <span class="comment">// 每次都输出原数组 [1,2,3,4]</span></span><br><span class="line">  <span class="keyword">return</span> prev + cur;</span><br><span class="line">&#125;, a)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum); <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><p><strong>天空没有翅膀的痕迹，而我已飞过</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;数组迭代方法&quot;&gt;&lt;a href=&quot;#数组迭代方法&quot; class=&quot;headerlink&quot; title=&quot;数组迭代方法&quot;&gt;&lt;/a&gt;数组迭代方法&lt;/h2&gt;&lt;h5 id=&quot;every&quot;&gt;&lt;a href=&quot;#every&quot; class=&quot;headerlink&quot; title=
      
    
    </summary>
    
    
      <category term="数组迭代与归并" scheme="http://yoursite.com/tags/%E6%95%B0%E7%BB%84%E8%BF%AD%E4%BB%A3%E4%B8%8E%E5%BD%92%E5%B9%B6/"/>
    
  </entry>
  
  <entry>
    <title>let,const</title>
    <link href="http://yoursite.com/2018/07/16/let,const/"/>
    <id>http://yoursite.com/2018/07/16/let,const/</id>
    <published>2018-07-16T13:33:43.000Z</published>
    <updated>2018-10-13T11:18:23.356Z</updated>
    
    <content type="html"><![CDATA[<h2 id="let命令"><a href="#let命令" class="headerlink" title="let命令"></a>let命令</h2><p><a href="http://es6.ruanyifeng.com/#docs/let" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#docs/let</a></p><h4 id="let基本用法"><a href="#let基本用法" class="headerlink" title="let基本用法"></a>let基本用法</h4><p>用let声明的变量，只会在其所在代码块内有效，例如</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i =<span class="number">1</span> ;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> i =<span class="number">2</span> ;</span><br><span class="line">    <span class="built_in">console</span>.log(i);    <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i)         <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>var声明的i和let声明的i实际上的储存地址是不一样的，两者为独立变量。<br>在let命令的代码块外是取不到let声明的变量的，而var可以。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a);         <span class="comment">//  a is no defined</span></span><br><span class="line"><span class="built_in">console</span>.log(b);         <span class="comment">//  1</span></span><br></pre></td></tr></table></figure><p>另外，for循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>( <span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; <span class="number">3</span> ; i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> i = <span class="string">"1 bin"</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将打印三次 1 bin</span></span><br></pre></td></tr></table></figure><p>let的作用相当于限定了变量的执行环境在其代码块内，用let命令声明变量之前，该变量都是不可用的</p><h4 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h4><p>如果区块中存在let和const命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  a = <span class="number">1</span>; <span class="comment">// ReferenceError</span></span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// ReferenceError</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> a; <span class="comment">// 在此之上全为暂时性死区</span></span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">  a = <span class="number">2</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(a); <span class="comment">// 2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="不存在变量提升也不能重复声明"><a href="#不存在变量提升也不能重复声明" class="headerlink" title="不存在变量提升也不能重复声明"></a>不存在变量提升也不能重复声明</h4><p>因为暂时性死去的存在，let和const都是没有变量提升的，而var存在变量提升，即变量可以在声明之前使用，值为undefined。</p><p>不能重复声明是指不能在同一个块级作用域内对同一个变量声明两次</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">let</span> a = <span class="number">2</span> ; <span class="comment">// ReferenceError</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>顶层对象，在浏览器环境指的是window对象，在 Node 指的是global对象。ES5 之中，顶层对象的属性与全局变量是等价的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.a = <span class="number">2</span>;</span><br><span class="line">a  <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">a = <span class="number">1</span> ;</span><br><span class="line"><span class="built_in">window</span>.a <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>而ES6规定，let命令、const命令、class命令声明的全局变量，不属于顶层对象的属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">window</span>.a <span class="comment">//1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">1</span> ;</span><br><span class="line">widndow.b <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h4 id="let的主要应用"><a href="#let的主要应用" class="headerlink" title="let的主要应用"></a>let的主要应用</h4><h5 id="应用1"><a href="#应用1" class="headerlink" title="应用1"></a>应用1</h5><p>let声明的变量具有不可被外界所干扰的特点，故适合用于循环变量,这样将不会造成变量泄露<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>( <span class="keyword">let</span> i = <span class="number">0</span> ; i &lt; <span class="number">6</span> ; i++)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i);    <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure></p><h5 id="应用2"><a href="#应用2" class="headerlink" title="应用2"></a>应用2</h5><p>let造成的块级作用域取代了立即执行函数表达式（IIFE）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// IIFE 写法</span></span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> a= <span class="number">1</span>;</span><br><span class="line">  ...</span><br><span class="line">&#125;());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 块级作用域写法</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="const命令"><a href="#const命令" class="headerlink" title="const命令"></a>const命令</h2><h4 id="const实质"><a href="#const实质" class="headerlink" title="const实质"></a>const实质</h4><p>const实质是指变量指向的那个内存地址不得改动。对于简单类型的数据，值就保存在变量指向的那个内存地址，因此等同于常量。但对于复合类型的数据（主要是对象和数组），变量指向的内存地址，保存的只是一个指针，const只能保证这个指针是固定的，至于它指向的数据结构是不是可变的，就完全不能控制了。</p><p>不过可以通过调用Object.freeze方法来冻结对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="built_in">Object</span>.freeze(&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常规模式时，下面一行不起作用；</span></span><br><span class="line"><span class="comment">// 严格模式时，该行会报错</span></span><br><span class="line">a.num = <span class="number">1</span>;</span><br></pre></td></tr></table></figure></p><h4 id="const性质"><a href="#const性质" class="headerlink" title="const性质"></a>const性质</h4><p>const具有以下性质</p><ol><li>存在暂时性死区</li><li>不能重复声明（同一个块级作用域内）</li><li>不存在变量提升</li><li>声明后必须赋初值（与let的不同点）   </li></ol><p><strong>别人稍一注意你，你就敞开心扉。你以为这是坦率，其实这是孤独。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;let命令&quot;&gt;&lt;a href=&quot;#let命令&quot; class=&quot;headerlink&quot; title=&quot;let命令&quot;&gt;&lt;/a&gt;let命令&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://es6.ruanyifeng.com/#docs/let&quot; target=&quot;_bla
      
    
    </summary>
    
    
      <category term="let" scheme="http://yoursite.com/tags/let/"/>
    
      <category term="const" scheme="http://yoursite.com/tags/const/"/>
    
      <category term="ES6" scheme="http://yoursite.com/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>canvas 2d</title>
    <link href="http://yoursite.com/2018/07/15/thirdDay/"/>
    <id>http://yoursite.com/2018/07/15/thirdDay/</id>
    <published>2018-07-15T13:33:43.000Z</published>
    <updated>2018-07-24T02:04:17.721Z</updated>
    
    <content type="html"><![CDATA[<p>canvas参考手册 <a href="http://www.runoob.com/tags/ref-canvas.html" target="_blank" rel="noopener">http://www.runoob.com/tags/ref-canvas.html</a></p><h3 id="canvas钟的制作"><a href="#canvas钟的制作" class="headerlink" title="canvas钟的制作"></a>canvas钟的制作</h3><h4 id="钟的静态样式"><a href="#钟的静态样式" class="headerlink" title="钟的静态样式"></a>钟的静态样式</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawBackground</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    context.save();  <span class="comment">//保存初始状态的幕布环境</span></span><br><span class="line">    context.beginPath();  <span class="comment">//重新开始一条路径</span></span><br><span class="line">    context.arc(<span class="number">200</span>,<span class="number">200</span>,r,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,<span class="literal">true</span>); <span class="comment">//画大圆 圆心(200,200)，半径为r，从0到2pi，true表示逆时针 </span></span><br><span class="line">    context.moveTo(<span class="number">295</span>,<span class="number">200</span>);</span><br><span class="line">    context.arc(<span class="number">200</span>,<span class="number">200</span>,r<span class="number">-5</span>,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,<span class="literal">false</span>);<span class="comment">//画小圆 圆心(200,200)，半径为r-5，从0到2pi，false表示顺时针 </span></span><br><span class="line">    context.translate(<span class="number">200</span>,<span class="number">200</span>); <span class="comment">//重新定义画布原点为（200，200）</span></span><br><span class="line">    context.stroke();           <span class="comment">//画路径（路径为非填充）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> aNumbers = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>,<span class="number">1</span>,<span class="number">2</span>]; <span class="comment">//以x正半轴为起点，顺时针旋转</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//文本字体信息 居中</span></span><br><span class="line">    context.font = <span class="string">'18px Arial'</span>;   </span><br><span class="line">    context.textAlign = <span class="string">'center'</span>;   </span><br><span class="line">    context.textBaseline = <span class="string">'middle'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//画12个数字</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span> ; i&lt;aNumbers.length ; i++)&#123;</span><br><span class="line">        <span class="keyword">var</span> rad = <span class="number">2</span>*<span class="built_in">Math</span>.PI /<span class="number">12</span> *( aNumbers[i]<span class="number">-3</span>);</span><br><span class="line">        <span class="keyword">var</span> x = <span class="built_in">Math</span>.cos(rad) * (r<span class="number">-20</span>);</span><br><span class="line">        <span class="keyword">var</span> y = <span class="built_in">Math</span>.sin(rad) * (r<span class="number">-20</span>);</span><br><span class="line"></span><br><span class="line">        context.fillText(aNumbers[i],x,y);<span class="comment">//给坐标（x,y）添加文本aNumbers[i]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="钟的秒针"><a href="#钟的秒针" class="headerlink" title="钟的秒针"></a>钟的秒针</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">drawSecond</span>(<span class="params">second</span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> rad = <span class="number">2</span>*<span class="built_in">Math</span>.PI / <span class="number">60</span> *second ;</span><br><span class="line"></span><br><span class="line">    context.save();</span><br><span class="line">    context.beginPath();</span><br><span class="line">    context.rotate(rad);</span><br><span class="line">    context.moveTo(<span class="number">2</span>,<span class="number">20</span>);</span><br><span class="line">    context.lineTo(<span class="number">-2</span>,<span class="number">20</span>);</span><br><span class="line">    context.lineTo(<span class="number">-1</span>,-r+<span class="number">18</span>)</span><br><span class="line">    context.lineTo(<span class="number">1</span>,-r+<span class="number">18</span>);</span><br><span class="line">    context.fillStyle=<span class="string">"red"</span>;</span><br><span class="line">    context.fill();</span><br><span class="line">    context.restore();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="秒针转动"><a href="#秒针转动" class="headerlink" title="秒针转动"></a>秒针转动</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">draw</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> width = context.canvas.width;</span><br><span class="line">    <span class="keyword">var</span> height = context.canvas.height;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">var</span> hour = now.getHours();</span><br><span class="line">    <span class="keyword">var</span> minute = now.getMinutes();</span><br><span class="line">    <span class="keyword">var</span> second = now.getSeconds();</span><br><span class="line"></span><br><span class="line">    context.clearRect(<span class="number">0</span>,<span class="number">0</span>,width,height); <span class="comment">//清除画布 从（0，0）开始的矩形</span></span><br><span class="line">    drawBackground();                <span class="comment">//画静态钟</span></span><br><span class="line">    drawSecond(second);               <span class="comment">//画秒针</span></span><br><span class="line">    context.restore();                </span><br><span class="line">&#125;</span><br><span class="line">    draw();</span><br><span class="line">    <span class="keyword">var</span> timer = setInterval(draw,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure><h2 id="canvas的一些方法"><a href="#canvas的一些方法" class="headerlink" title="canvas的一些方法"></a>canvas的一些方法</h2><h5 id="save-和restore"><a href="#save-和restore" class="headerlink" title="save()和restore()"></a>save()和restore()</h5><p>save():    保存当前环境的状态。<br>restore():    返回之前保存过的路径状态和属性。<br>这两个经常搭配起来用，适合只想对画布某些方面做出修改的情况。</p><h5 id="clearRect"><a href="#clearRect" class="headerlink" title="clearRect()"></a>clearRect()</h5><p>给定矩形清除像素，通常用于图形变换（删了重画）</p><h5 id="drawImage-和createPattern"><a href="#drawImage-和createPattern" class="headerlink" title="drawImage()和createPattern()"></a>drawImage()和createPattern()</h5><p>html为canvas内嵌img标签<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> image = <span class="built_in">document</span>.images[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>);</span><br><span class="line"><span class="keyword">var</span> ctx = canvas.getContext(<span class="string">'2d'</span>); </span><br><span class="line"></span><br><span class="line">ctx.drawImage(image,<span class="number">0</span>,<span class="number">10</span>,<span class="number">50</span>,<span class="number">50</span>,<span class="number">0</span>,<span class="number">100</span>,<span class="number">40</span>,<span class="number">40</span>);</span><br></pre></td></tr></table></figure></p><p>模式，即所谓图片的重复<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pattern = ctx.createPattern(image,<span class="string">"repeat"</span>);</span><br><span class="line"></span><br><span class="line">ctx.fillStyle = pattern ;</span><br><span class="line">ctx.fillRect(<span class="number">10</span>,<span class="number">10</span>,<span class="number">500</span>,<span class="number">500</span>);</span><br></pre></td></tr></table></figure></p><h5 id="shadow"><a href="#shadow" class="headerlink" title="shadow"></a>shadow</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置阴影</span></span><br><span class="line">ctx.shadowOffsetX = <span class="number">5</span>;</span><br><span class="line">ctx.shadowOffsetY = <span class="number">5</span>;</span><br><span class="line">ctx.shadowBlur = <span class="number">4</span>;   <span class="comment">//模糊度,0为不模糊</span></span><br><span class="line">ctx.shadowColor = <span class="string">'rgba(0,0,0,0.5)'</span></span><br><span class="line"></span><br><span class="line">ctx.fillStyle =<span class="string">'red'</span>;</span><br><span class="line">ctx.fillRect(<span class="number">100</span>,<span class="number">100</span>,<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line"></span><br><span class="line">ctx.fillStyle = <span class="string">'blue'</span>;</span><br><span class="line">ctx.fillRect(<span class="number">200</span>,<span class="number">200</span>,<span class="number">300</span>,<span class="number">300</span>);</span><br></pre></td></tr></table></figure><h5 id="gradient"><a href="#gradient" class="headerlink" title="gradient"></a>gradient</h5><p>水平渐变<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用函数来确保起点到终点的渐变</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createRectLinearGradient</span>(<span class="params">ctx,x,y,width,height</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ctx.createLinearGradient(x,y,x+width,y+height);</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">var</span> ctx = <span class="built_in">document</span>.getElementById(<span class="string">'canvas'</span>).getContext(<span class="string">'2d'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> grd = createRectLinearGradient(ctx,<span class="number">100</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">200</span>);  <span class="comment">// (100,100)到（300，300）的渐变</span></span><br><span class="line">grd.addColorStop(<span class="number">0</span>,<span class="string">'blue'</span>);  <span class="comment">//起点</span></span><br><span class="line">grd.addColorStop(<span class="number">0.5</span>,<span class="string">'green'</span>);</span><br><span class="line">grd.addColorStop(<span class="number">1</span>,<span class="string">'red'</span>);  <span class="comment">//终点</span></span><br><span class="line"></span><br><span class="line">ctx.fillStyle = grd;</span><br><span class="line">ctx.fillRect(<span class="number">100</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">200</span>)   <span class="comment">//起点（100，100） 长宽 50px</span></span><br></pre></td></tr></table></figure></p><p>径向渐变<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//同心圆</span></span><br><span class="line"><span class="keyword">var</span> grd = ctx.createRadialGradient(<span class="number">150</span>,<span class="number">150</span>,<span class="number">100</span>,<span class="number">150</span>,<span class="number">150</span>,<span class="number">150</span>);</span><br><span class="line"></span><br><span class="line">grd.addColorStop(<span class="number">0</span>,<span class="string">'blue'</span>);  <span class="comment">//起点</span></span><br><span class="line">grd.addColorStop(<span class="number">0.5</span>,<span class="string">'green'</span>);</span><br><span class="line">grd.addColorStop(<span class="number">1</span>,<span class="string">'red'</span>);  <span class="comment">//终点</span></span><br><span class="line"></span><br><span class="line">ctx.fillStyle = grd ;</span><br><span class="line">ctx.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">300</span>,<span class="number">300</span>);</span><br></pre></td></tr></table></figure></p><p><strong>如果事与愿违，请相信另有安排。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;canvas参考手册 &lt;a href=&quot;http://www.runoob.com/tags/ref-canvas.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.runoob.com/tags/ref-canvas.html
      
    
    </summary>
    
    
      <category term="canvas 2d" scheme="http://yoursite.com/tags/canvas-2d/"/>
    
  </entry>
  
</feed>
